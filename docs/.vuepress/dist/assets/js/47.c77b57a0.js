(window.webpackJsonp=window.webpackJsonp||[]).push([[47],{332:function(t,s,r){"use strict";r.r(s);var a=r(14),v=Object(a.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"ddd落地总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ddd落地总结"}},[t._v("#")]),t._v(" DDD落地总结")]),t._v(" "),s("h2",{attrs:{id:"使用步骤"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用步骤"}},[t._v("#")]),t._v(" 使用步骤")]),t._v(" "),s("p",[t._v("在开发复杂软件的时候，采用领域驱动设计的方式，具体有哪些步骤？")]),t._v(" "),s("p",[t._v("一般来说，领域驱动设计的步骤包括以下几个方面¹²³：")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("战略设计")]),t._v("：在这个阶段，需要识别业务的域和子域，并划分限界上下文。限界上下文是一个具有内聚性和边界性的业务范围，它定义了一个领域模型的边界和与其他限界上下文的交互方式。例如，电商系统可以划分为订单、库存、物流、搜索推荐等子域和限界上下文¹。")]),t._v(" "),s("li",[s("strong",[t._v("战术设计")]),t._v("：在这个阶段，需要根据限界上下文内的业务需求和规则，设计领域模型的具体元素和关系。这些元素包括实体、值对象、聚合、聚合根、领域服务、领域事件、工厂、仓储等¹²。例如，订单子域可以包含订单实体、订单项值对象、订单聚合根、订单服务、订单创建事件等³。")]),t._v(" "),s("li",[s("strong",[t._v("实现")]),t._v("：在这个阶段，需要将领域模型用代码来实现，并遵循一些原则和架构来保证代码的可读性、可扩展性和可维护性。一种常用的架构是六边形架构（也叫端口与适配器架构），它将领域层与基础设施层（如数据库、消息中间件、第三方服务等）隔离，并通过端口和适配器来进行交互²³。")])]),t._v(" "),s("p",[t._v("以上是领域驱动设计的大致步骤，具体的实践可能会根据不同的业务场景和技术选型有所差异。")])])}),[],!1,null,null,null);s.default=v.exports}}]);