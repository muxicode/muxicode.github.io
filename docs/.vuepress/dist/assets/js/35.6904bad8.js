(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{323:function(v,_,l){"use strict";l.r(_);var i=l(14),t=Object(i.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h1",{attrs:{id:"ddd-思想解读及优秀实践"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#ddd-思想解读及优秀实践"}},[v._v("#")]),v._v(" DDD 思想解读及优秀实践")]),v._v(" "),_("h2",{attrs:{id:"ddd的背景及来源"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#ddd的背景及来源"}},[v._v("#")]),v._v(" DDD的背景及来源")]),v._v(" "),_("blockquote",[_("p",[v._v("DDD的背景和来源")])]),v._v(" "),_("ul",[_("li",[v._v("DDD 的核心思想与解决的痛点")]),v._v(" "),_("li",[v._v("DDD 的过去，现在与未来")]),v._v(" "),_("li",[v._v("面向对象和敏捷与DDD的区别与联系")])]),v._v(" "),_("blockquote",[_("p",[v._v("战略设计")])]),v._v(" "),_("ul",[_("li",[v._v("案例背景介绍")]),v._v(" "),_("li",[v._v("建模和设计的整体流程")]),v._v(" "),_("li",[v._v("建立通用语言")]),v._v(" "),_("li",[v._v("子域和领域划分")]),v._v(" "),_("li",[v._v("核心域与精炼")]),v._v(" "),_("li",[v._v("上下文映射")]),v._v(" "),_("li",[v._v("分层架构")])]),v._v(" "),_("blockquote",[_("p",[v._v("初涉战术设计")])]),v._v(" "),_("ul",[_("li",[v._v("开发环境准备、基本约定和架构说明")]),v._v(" "),_("li",[v._v("战术设计分析和交易域依赖准备工作")]),v._v(" "),_("li",[v._v("实体和值对象")]),v._v(" "),_("li",[v._v("领域对象的构造")]),v._v(" "),_("li",[v._v("资源库与持久化")]),v._v(" "),_("li",[v._v("聚合")]),v._v(" "),_("li",[v._v("领域服务")]),v._v(" "),_("li",[v._v("应用层实现")])]),v._v(" "),_("blockquote",[_("p",[v._v("深入战术设计")])]),v._v(" "),_("ul",[_("li",[v._v("领域事件和事件风暴建模法")]),v._v(" "),_("li",[v._v("基于事件风暴建模法对运营域建模")]),v._v(" "),_("li",[v._v("防腐层的构建")]),v._v(" "),_("li",[v._v("DDD在大数据ETL和分析场景的应用")])]),v._v(" "),_("blockquote",[_("p",[v._v("架构升级：从单体到微服务")])]),v._v(" "),_("ul",[_("li",[v._v("为什么要微服务，微服务的前提和基础")]),v._v(" "),_("li",[v._v("微服务的问题和DDD的答案")]),v._v(" "),_("li",[v._v("微服务主流框架简介")]),v._v(" "),_("li",[v._v("基于DDD思想进行服务拆分")]),v._v(" "),_("li",[v._v("基于服务网络技术对案例系统进行微服务改造")]),v._v(" "),_("li",[v._v("使用K8S进行服务编排，部署上云")])]),v._v(" "),_("blockquote",[_("p",[v._v("DDD 实践中的问题和关键点")])]),v._v(" "),_("ul",[_("li",[v._v("持续集成的重要性及如何搭建")]),v._v(" "),_("li",[v._v("如何避免漏掉重要细节")]),v._v(" "),_("li",[v._v("DDD的局限性，不能解决什么问题")])]),v._v(" "),_("blockquote",[_("p",[v._v("总结与展望")])]),v._v(" "),_("ul",[_("li",[v._v("DDD的核心思想与方法回顾")]),v._v(" "),_("li",[v._v("程序员的技术生涯")])]),v._v(" "),_("blockquote",[_("p",[v._v("技术储备")])]),v._v(" "),_("ul",[_("li",[v._v("Java 语言基础")]),v._v(" "),_("li",[v._v("Sprint boot 基本应用")])]),v._v(" "),_("h3",{attrs:{id:"ddd-的核心思想和解决的痛点问题"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#ddd-的核心思想和解决的痛点问题"}},[v._v("#")]),v._v(" DDD 的核心思想和解决的痛点问题")]),v._v(" "),_("ul",[_("li",[v._v("什么是模型和建模？")]),v._v(" "),_("li",[v._v("软件系统的复杂性来自哪里？")]),v._v(" "),_("li",[v._v("DDD 的关键思想以及如何应对多变的复杂性？")])]),v._v(" "),_("blockquote",[_("p",[v._v("小结")])]),v._v(" "),_("ul",[_("li",[v._v("模型是对领域的抽象，建模是针对特定问题建立领域的合理模型")]),v._v(" "),_("li",[v._v("复杂性来源于业务本身的复杂性和设计引入的额外复杂性")]),v._v(" "),_("li",[v._v("领域驱动设计通过分解模型和模型驱动设计控制复杂性")])]),v._v(" "),_("h3",{attrs:{id:"面向对象和敏捷与ddd的区别与联系"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#面向对象和敏捷与ddd的区别与联系"}},[v._v("#")]),v._v(" 面向对象和敏捷与DDD的区别与联系")]),v._v(" "),_("blockquote",[_("p",[v._v("面向对象（OOAD）")])]),v._v(" "),_("ul",[_("li",[v._v("对象设计与分析与DDD在同一层")]),v._v(" "),_("li",[v._v("工具的复用与DDD一致")]),v._v(" "),_("li",[v._v("区别是DDD更加详细，能够应对复杂系统的开发")])]),v._v(" "),_("blockquote",[_("p",[v._v("敏捷")])]),v._v(" "),_("ul",[_("li",[v._v("是一种流程与文化")]),v._v(" "),_("li",[v._v("敏捷轻文档，DDD战略设计需要统一语言进行详细描述")]),v._v(" "),_("li",[v._v("敏捷与DDD是互补的关系")])]),v._v(" "),_("h3",{attrs:{id:"敏捷的过去、现在与未来"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#敏捷的过去、现在与未来"}},[v._v("#")]),v._v(" 敏捷的过去、现在与未来")]),v._v(" "),_("blockquote",[_("p",[v._v("领域驱动设计的诞生")])]),v._v(" "),_("ul",[_("li",[v._v("Eric Evans 1966.12.28")]),v._v(" "),_("li",[v._v("《领域驱动设计：软件核心复杂性应对之道》2003")])]),v._v(" "),_("blockquote",[_("p",[v._v("领域驱动设计的发展历史")])]),v._v(" "),_("blockquote",[_("p",[v._v("领域驱动设计的现状和未来")])]),v._v(" "),_("h2",{attrs:{id:"战略设计"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#战略设计"}},[v._v("#")]),v._v(" 战略设计")]),v._v(" "),_("h3",{attrs:{id:"智慧零售案例项目介绍"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#智慧零售案例项目介绍"}},[v._v("#")]),v._v(" 智慧零售案例项目介绍")]),v._v(" "),_("blockquote",[_("p",[v._v("零售行业")])]),v._v(" "),_("ul",[_("li",[v._v("GDP 39.2 万亿，经济占比百分之40左右")]),v._v(" "),_("li",[v._v("线上9.7万亿（实物）（24.9%）")]),v._v(" "),_("li",[v._v("线下27.4万亿（70%）")])]),v._v(" "),_("blockquote",[_("p",[v._v("智慧零售/新零售")])]),v._v(" "),_("ul",[_("li",[v._v("供应链")]),v._v(" "),_("li",[v._v("用户体验")]),v._v(" "),_("li",[v._v("货")]),v._v(" "),_("li",[v._v("场所")]),v._v(" "),_("li",[v._v("人")]),v._v(" "),_("li",[v._v("云+大数据+AI+物联网")])]),v._v(" "),_("blockquote",[_("p",[v._v("业务背景")])]),v._v(" "),_("p",[v._v("面向自动售卖机的零售Saas")]),v._v(" "),_("p",[_("img",{attrs:{src:"/ddd.assets/DDD_saas.drawio-16791428414452.png",alt:""}})]),v._v(" "),_("p",[v._v("Smart Retail Machine（智能零售机器）")]),v._v(" "),_("blockquote",[_("p",[v._v("团队背景")])]),v._v(" "),_("p",[v._v("A公司：SaaS公司，主要面向零售企业客户")]),v._v(" "),_("p",[v._v("SmartRM产品团队：以为资深产品经理，几位产品策划")]),v._v(" "),_("p",[v._v("SmartRM研发团队：一位架构师，10+开发，资深开发3至4位")]),v._v(" "),_("blockquote",[_("p",[v._v("客户背景")])]),v._v(" "),_("p",[v._v("B集团：零售行业某头部商家")]),v._v(" "),_("p",[v._v("全国各地大量商超和便利店，由成熟的内部系统和供应链")]),v._v(" "),_("p",[v._v("基于自动售卖机的零售业务是新业务")]),v._v(" "),_("blockquote",[_("p",[v._v("案例优势")])]),v._v(" "),_("p",[v._v("复杂度可覆盖DDD大部分知识点，并体现其价值")]),v._v(" "),_("p",[v._v("智慧零售市场庞大且场景接近日常生活")]),v._v(" "),_("p",[v._v("有数据分析需求，可结合大数据分析场景")]),v._v(" "),_("blockquote",[_("p",[v._v("小结")])]),v._v(" "),_("ul",[_("li",[v._v("行业背景")]),v._v(" "),_("li",[v._v("业务、团队、客户背景")]),v._v(" "),_("li",[v._v("案例目标和优势")])]),v._v(" "),_("h3",{attrs:{id:"建模和设计的整体流程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#建模和设计的整体流程"}},[v._v("#")]),v._v(" 建模和设计的整体流程")]),v._v(" "),_("blockquote",[_("p",[v._v("软件系统从需求到最终技术方案包含的环节")])]),v._v(" "),_("ul",[_("li",[v._v("挖掘用户故事")]),v._v(" "),_("li",[v._v("建立通用语言")]),v._v(" "),_("li",[v._v("战略设计")]),v._v(" "),_("li",[v._v("战术设计")]),v._v(" "),_("li",[v._v("建模涡流（Model Exploration Whirlpool）\n"),_("ul",[_("li",[v._v("战略设计 -》 战术设计 -》 战略设计")]),v._v(" "),_("li",[v._v("领域划分 -》 寻找BC    -》领域划分")])])])]),v._v(" "),_("p",[v._v("参与人员：")]),v._v(" "),_("ul",[_("li",[v._v("产品团队")]),v._v(" "),_("li",[v._v("领域专家")]),v._v(" "),_("li",[v._v("研发团队")])]),v._v(" "),_("blockquote",[_("p",[v._v("各环节的目标和概要")])]),v._v(" "),_("p",[v._v("用户故事：")]),v._v(" "),_("ul",[_("li",[v._v("问题空间的描绘")]),v._v(" "),_("li",[v._v("文字表述")]),v._v(" "),_("li",[v._v("讨论+图形表达（ER图，或者将问题拆分步骤将问题分布画图表示）")])]),v._v(" "),_("p",[v._v("采用3C对用户故事描述")]),v._v(" "),_("p",[v._v("Card（卡片--Who What Why）、Conversation（谈话），Confirmation（验证）")]),v._v(" "),_("p",[v._v("通用语言：")]),v._v(" "),_("ul",[_("li",[v._v("在讨论模型和定义模型时，团队使用的同一种语言")]),v._v(" "),_("li",[v._v("领域知识需要在团队内部高效流转，模型需要描述")]),v._v(" "),_("li",[v._v("通用语言要体现在代码里")])]),v._v(" "),_("p",[v._v("战略设计：")]),v._v(" "),_("ul",[_("li",[v._v("DDD 中对问题空间和解决方案空间进行分解的过程")]),v._v(" "),_("li",[v._v("目的是分解模型以控制复杂性")]),v._v(" "),_("li",[v._v("是DDD与传统建模和设计方法的核心区别之一")])]),v._v(" "),_("p",[v._v("步骤：")]),v._v(" "),_("ul",[_("li",[v._v("领域划分")]),v._v(" "),_("li",[v._v("寻找限界上下文（BC）")]),v._v(" "),_("li",[v._v("确定上下文映射")])]),v._v(" "),_("p",[_("img",{attrs:{src:"/ddd.assets/%E6%88%98%E7%95%A5%E8%AE%BE%E8%AE%A1%E5%9B%BE.drawio-16791428414464.png",alt:""}})]),v._v(" "),_("p",[v._v("战术设计：")]),v._v(" "),_("ul",[_("li",[v._v("对各个BC的细节设计过程")]),v._v(" "),_("li",[v._v("BC内部的模型结构与完整技术方案")])]),v._v(" "),_("p",[v._v("（作者认为战术设计是包括编码的）")]),v._v(" "),_("p",[_("img",{attrs:{src:"/ddd.assets/%E6%88%98%E6%9C%AF%E8%AE%BE%E8%AE%A1.drawio-16791428414466.png",alt:""}})]),v._v(" "),_("blockquote",[_("p",[v._v("常用建模方法")])]),v._v(" "),_("ul",[_("li",[v._v("Domain Storytelling （领域故事陈述法）")]),v._v(" "),_("li",[v._v("Event Storming （事件风暴法）")]),v._v(" "),_("li",[v._v("4C （四色建模法）")])]),v._v(" "),_("blockquote",[_("p",[v._v("小结")])]),v._v(" "),_("p",[_("img",{attrs:{src:"/ddd.assets/%E5%BB%BA%E6%A8%A1%E5%92%8C%E8%AE%BE%E8%AE%A1%E6%95%B4%E4%BD%93%E6%B5%81%E7%A8%8B.drawio-16791428414468.png",alt:""}})]),v._v(" "),_("h3",{attrs:{id:"从用户故事到通用语言"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#从用户故事到通用语言"}},[v._v("#")]),v._v(" 从用户故事到通用语言")]),v._v(" "),_("blockquote",[_("p",[v._v("用户故事")])]),v._v(" "),_("ul",[_("li",[v._v("代码写好后修改需求？")]),v._v(" "),_("li",[v._v("需求文档不细致，关键点没有？")]),v._v(" "),_("li",[v._v("不要拍脑袋定需求")]),v._v(" "),_("li",[v._v("基于用户故事讨论")])]),v._v(" "),_("blockquote",[_("p",[v._v("通用语言")])]),v._v(" "),_("p",[v._v("三个要素：")]),v._v(" "),_("ul",[_("li",[v._v("一种描述摩西那个且基于模型的语言")]),v._v(" "),_("li",[v._v("团队在进行所有交流时都使用它")]),v._v(" "),_("li",[v._v("代码中也要体现")])]),v._v(" "),_("p",[v._v("包括：")]),v._v(" "),_("ul",[_("li",[v._v("类和操作的名称")]),v._v(" "),_("li",[v._v("施加与模型之上的规则和约束（如补充货物，超过了售货机上限）")]),v._v(" "),_("li",[v._v("应用于领域模型的模式（工厂、库，上下文）")])]),v._v(" "),_("p",[_("img",{attrs:{src:"/ddd.assets/%E9%80%9A%E7%94%A8%E8%AF%AD%E8%A8%80.drawio-167914284144610.png",alt:""}})]),v._v(" "),_("p",[v._v("讨论中的起初建立的通用语言与模型可能与领域有差距，但是通过讨论与纠正，最终的模型慢慢靠近显示世界的领域合理模型。如果只是使用自然语言，则每个人的见解不同，无法做到模型的统一。")]),v._v(" "),_("blockquote",[_("p",[v._v("小结")])]),v._v(" "),_("ul",[_("li",[v._v("使用Domain Storytelling 方法分析用户故事")]),v._v(" "),_("li",[v._v("通用语言的定义、作用、与构成，以及如何建立")])]),v._v(" "),_("h3",{attrs:{id:"领域划分"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#领域划分"}},[v._v("#")]),v._v(" 领域划分")]),v._v(" "),_("ul",[_("li",[v._v("什么是领域划分和子域")]),v._v(" "),_("li",[v._v("为什么要进行领域划分")]),v._v(" "),_("li",[v._v("基于用户故事分解的领域划分方法")])]),v._v(" "),_("blockquote",[_("p",[v._v("什么是领域划分")])]),v._v(" "),_("ul",[_("li",[_("strong",[v._v("领域划分")]),v._v("是以"),_("strong",[v._v("分离关注点")]),v._v("为原则对空"),_("strong",[v._v("问题空间")]),v._v("的划分")]),v._v(" "),_("li",[_("strong",[v._v("子域")]),v._v("是领域中某个方面的问题和解决它所涉及的一切")])]),v._v(" "),_("p",[v._v("基于用户故事，先进性简单分域：")]),v._v(" "),_("p",[_("img",{attrs:{src:"/ddd.assets/%E7%94%A8%E6%88%B7%E6%95%85%E4%BA%8B%E9%A2%86%E5%9F%9F%E5%88%92%E5%88%86.drawio-167914284144612.png",alt:""}})]),v._v(" "),_("blockquote",[_("p",[v._v("为什么要进行领域划分")])]),v._v(" "),_("ul",[_("li",[v._v("传统需求开发，问题点和领域知识重叠")])]),v._v(" "),_("p",[_("img",{attrs:{src:"/ddd.assets/%E9%A2%86%E5%9F%9F%E7%9F%A5%E8%AF%86%E9%87%8D%E5%8F%A0.drawio-167914284144614.png",alt:""}})]),v._v(" "),_("ul",[_("li",[v._v("模型重叠")])]),v._v(" "),_("p",[_("img",{attrs:{src:"/ddd.assets/%E6%A8%A1%E5%9E%8B%E9%87%8D%E5%8F%A0.drawio-167914284144616.png",alt:""}})]),v._v(" "),_("blockquote",[_("p",[v._v("领域划分可以解决传统模式的问题")])]),v._v(" "),_("ul",[_("li",[v._v("不同子领域聚焦不同问题")])]),v._v(" "),_("p",[_("img",{attrs:{src:"/ddd.assets/%E9%A2%86%E5%9F%9F%E5%88%92%E5%88%86%E5%BC%80%E5%8F%91.drawio-167914284144618.png",alt:""}})]),v._v(" "),_("blockquote",[_("p",[v._v("基于故事分解的领域划分")])]),v._v(" "),_("p",[v._v("售货机扫码支付购物，用户故事图")]),v._v(" "),_("p",[_("img",{attrs:{src:"/ddd.assets/%E7%94%A8%E6%88%B7%E6%89%AB%E7%A0%81%E6%94%AF%E4%BB%98%E5%9B%BE.drawio-167914284144620.png",alt:""}})]),v._v(" "),_("p",[v._v("故事再划分：支付二维码")]),v._v(" "),_("p",[_("img",{attrs:{src:"/ddd.assets/%E6%94%AF%E4%BB%98%E4%BA%8C%E7%BB%B4%E7%A0%81%E7%94%A8%E6%88%B7%E6%95%85%E4%BA%8B.drawio-167914284144622.png",alt:""}})]),v._v(" "),_("p",[v._v("分解什么时候停止：问题足够聚焦，聚焦到一个领域问题，甚至可以是一个原子操作。")]),v._v(" "),_("p",[v._v("用户故事分解树状图：")]),v._v(" "),_("p",[_("img",{attrs:{src:"/ddd.assets/%E7%94%A8%E6%88%B7%E6%89%AB%E7%A0%81%E6%94%AF%E4%BB%98%E5%88%86%E8%A7%A3%E6%A0%91%E7%8A%B6%E5%9B%BE.drawio-167914284144724.png",alt:""}})]),v._v(" "),_("p",[v._v("将所有节点穿起来，并归类，将每个类别起个名称：")]),v._v(" "),_("p",[_("img",{attrs:{src:"/ddd.assets/%E9%A2%86%E5%9F%9F%E9%97%AE%E9%A2%98%E5%BD%92%E7%B1%BB%E5%88%92%E5%88%86%E5%AD%90%E9%A2%86%E5%9F%9F.drawio-167914284144726.png",alt:""}})]),v._v(" "),_("p",[v._v("交易域拆分结果：")]),v._v(" "),_("p",[_("img",{attrs:{src:"/ddd.assets/%E4%BA%A4%E6%98%93%E5%9F%9F%E6%8B%86%E5%88%86%E7%BB%93%E6%9E%9C.drawio-167914284144728.png",alt:""}})]),v._v(" "),_("p",[v._v("分解运营域具体过程查看文档，最终可得到：")]),v._v(" "),_("p",[_("img",{attrs:{src:"/ddd.assets/%E6%95%B4%E4%BD%93%E5%88%92%E5%88%86.drawio-167914284144730.png",alt:""}})]),v._v(" "),_("blockquote",[_("p",[v._v("小结")])]),v._v(" "),_("ul",[_("li",[v._v("领域划分是对问题空间的划分，划分的原则是分离关注点")]),v._v(" "),_("li",[v._v("基于领域划分进行分工协作而非基于需求")]),v._v(" "),_("li",[v._v("基于用户故事分解可以让领域划分清晰化（该过程并不是机械化，分解的而是需要思考与讨论的）")])]),v._v(" "),_("p",[v._v("系统设计仍然有他的艺术性，同一个问题分解的的方式可以不一样，实际上分解本身就是从问题空间向方案空间进行的过程，分解方案就是解决方案的一部分，提供的方法只是一种辅助分析的方法，这种方法是有效的，但它不是机械的操作流程，分解的过程中，仍然需要大量的思考和团队的讨论，不同的分解方式会导致不同的方案和效率，好的分解，才能导入好的方案。")]),v._v(" "),_("h3",{attrs:{id:"核心域和精炼"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#核心域和精炼"}},[v._v("#")]),v._v(" 核心域和精炼")]),v._v(" "),_("ul",[_("li",[v._v("子域的类型")]),v._v(" "),_("li",[v._v("核心域的意义")]),v._v(" "),_("li",[v._v("什么是精炼及精炼的方法")])]),v._v(" "),_("blockquote",[_("p",[v._v("子域的类型")])]),v._v(" "),_("ul",[_("li",[v._v("核心域")]),v._v(" "),_("li",[v._v("通用子域")]),v._v(" "),_("li",[v._v("支撑子域")])]),v._v(" "),_("blockquote",[_("p",[v._v("精炼")])]),v._v(" "),_("ul",[_("li",[v._v("萃取（随着对领域分析的深入，逐渐发现最能影响产品成功的关键问题）")]),v._v(" "),_("li",[v._v("分离（对问题分解，将对核心领域影响不大的部分剥离出来）")])]),v._v(" "),_("p",[v._v("本案例中，交易域的分解就是精炼的过程")]),v._v(" "),_("blockquote",[_("p",[v._v("小结")])]),v._v(" "),_("ul",[_("li",[v._v("战略设计要明确"),_("strong",[v._v("核心域")]),v._v("，团队尽量减少非核心域投入")]),v._v(" "),_("li",[v._v("从个人发展角度，程序员也要尽量投入核心域的工作")]),v._v(" "),_("li",[v._v("核心域的建立总是伴随着精炼，精炼有两总方法")])]),v._v(" "),_("blockquote",[_("p",[v._v("SmartRM系统领域划分")])]),v._v(" "),_("p",[_("img",{attrs:{src:"/ddd.assets/%E6%A1%88%E4%BE%8B%E7%9A%84%E6%A0%B8%E5%BF%83%E5%9F%9F.drawio-167914284145072.png",alt:""}})]),v._v(" "),_("h3",{attrs:{id:"限界上下文"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#限界上下文"}},[v._v("#")]),v._v(" 限界上下文")]),v._v(" "),_("ul",[_("li",[v._v("什么是限界上下文")]),v._v(" "),_("li",[v._v("为什么需要限界上下文")]),v._v(" "),_("li",[v._v("如何划分限界上下文")]),v._v(" "),_("li",[v._v("限界上下文和微服务的关系")])]),v._v(" "),_("blockquote",[_("p",[v._v("什么是限界上下文")])]),v._v(" "),_("p",[v._v("Vaugh Vernon 《领域驱动设计》")]),v._v(" "),_("p",[v._v("限界上下文是一种语义上的上下文边界。意思是在这个边界里的软件模型组件都有它特定的含义并且做特定的事。一个限界上下文内的组件都是上下文特定的并且语义明确的。")]),v._v(" "),_("p",[_("img",{attrs:{src:"/ddd.assets/%E9%92%B1%E7%9A%84%E9%99%90%E7%95%8C%E4%B8%8A%E4%B8%8B%E6%96%87.drawio-167914284144732.png",alt:""}})]),v._v(" "),_("blockquote",[_("p",[v._v("为什么需要限界上下文")])]),v._v(" "),_("ul",[_("li",[v._v("自然语言具有模糊性\n"),_("ul",[_("li",[v._v("“你这是什么意思”， “没什么意思，就是一点小意思”")])])]),v._v(" "),_("li",[v._v("同一个事物面向不同的场景有不同模型")]),v._v(" "),_("li",[v._v("软件系统需要分解模型以控制复杂度")])]),v._v(" "),_("p",[v._v("不分解的话，可能最后会变成很一个大泥球的模型，系统会难以维护")]),v._v(" "),_("p",[_("img",{attrs:{src:"/ddd.assets/%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81%E9%99%90%E7%95%8C%E4%B8%8A%E4%B8%8B%E6%96%87.drawio-167914284144734.png",alt:""}})]),v._v(" "),_("ul",[_("li",[v._v("限界上下文是分工的单位（与子域分配并不冲突）")])]),v._v(" "),_("blockquote",[_("p",[v._v("如何划分限界上下文")])]),v._v(" "),_("ul",[_("li",[v._v("Domain Storytelling （领域故事陈述法）")]),v._v(" "),_("li",[v._v("Event Storming         （事件风暴法）")]),v._v(" "),_("li",[v._v("基于子域概念提取")])]),v._v(" "),_("blockquote",[_("p",[v._v("Domain storytelling 中边界特征（2018年前后，比较新）")])]),v._v(" "),_("p",[_("img",{attrs:{src:"/ddd.assets/%E9%A2%86%E5%9F%9F%E6%95%85%E4%BA%8B%E9%99%88%E8%BF%B0%E6%B3%95.drawio-167914284144736.png",alt:""}})]),v._v(" "),_("ul",[_("li",[v._v("单向联系")]),v._v(" "),_("li",[v._v("语义区别")]),v._v(" "),_("li",[v._v("活动的触发方式不一样")])]),v._v(" "),_("p",[v._v("有时候，满足三个条件的时候也可以不用限界上下文，但有时候只有一个条件，却需要限界上下文，当然坏的方式都有一些类似的味道。不同的方案有不同的优势，具体取决于架构师和开发团队。")]),v._v(" "),_("p",[v._v("限界上下文是大一些好还是小一些好，是多一些好还是少一些好？系统划分是否有一个标准呢，系统的建模和设计并没有一个答案，边界的标志也并不是绝对的，在前期的限界上下文设计里，需要宁缺勿滥。比如过早划分限界上下文，有可能缺失全局优化的机会。如果确实属于不同的上下文，那么我们迟早会发现。")]),v._v(" "),_("p",[_("img",{attrs:{src:"/ddd.assets/%E5%BB%BA%E6%A8%A1%E6%B6%A1%E6%97%8B.drawio-167914284144738.png",alt:""}})]),v._v(" "),_("blockquote",[_("p",[v._v("Event Storming 事件风暴法（如日中天，可以说是DDD中，最重要的建模方法）")])]),v._v(" "),_("p",[v._v("后续补充")]),v._v(" "),_("blockquote",[_("p",[v._v("基于子域概念提取")])]),v._v(" "),_("p",[v._v("前两种方法，划分限界上下文，需要深入业务中，分析清除具体业务才可以对上下文的划分。")]),v._v(" "),_("p",[v._v("该方法可以更快的划分限界上下文")]),v._v(" "),_("p",[_("img",{attrs:{src:"/ddd.assets/%E5%9F%BA%E4%BA%8E%E5%AD%90%E5%9F%9F%E6%A6%82%E5%BF%B5%E6%8F%90%E5%8F%96.drawio-167914284144840.png",alt:""}})]),v._v(" "),_("p",[v._v("通过分别从各子领域的用户故事中提取关键概念，审视他们之间的关系，以及他们与外部系统之间的关系，我们可以梳理出系统的限界上下文。")]),v._v(" "),_("p",[_("img",{attrs:{src:"/ddd.assets/%E5%9F%BA%E4%BA%8E%E5%AD%90%E9%A2%86%E5%9F%9F%E6%A6%82%E5%BF%B5%E6%8F%90%E5%8F%96%E9%99%90%E7%95%8C%E4%B8%8A%E4%B8%8B%E6%96%87.drawio-167914284144842.png",alt:""}})]),v._v(" "),_("p",[v._v("SmartRM 子域和限界上下文")]),v._v(" "),_("p",[_("img",{attrs:{src:"/ddd.assets/smartRm%E9%99%90%E7%95%8C%E4%B8%8A%E4%B8%8B%E6%96%87.drawio-167914284144844.png",alt:""}})]),v._v(" "),_("blockquote",[_("p",[v._v("小结")])]),v._v(" "),_("ul",[_("li",[v._v("限界上下文是在解决方案空间对模型的分解单位")]),v._v(" "),_("li",[v._v("限界上下文的作用：控制复杂性，便于分工协作")]),v._v(" "),_("li",[v._v("限界上下文的三种划分方法")]),v._v(" "),_("li",[v._v("限界上下文和微服务的关系：后者是前者的一种实现方式")])]),v._v(" "),_("h3",{attrs:{id:"上下文映射-context-mapping"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#上下文映射-context-mapping"}},[v._v("#")]),v._v(" 上下文映射（Context Mapping）")]),v._v(" "),_("ul",[_("li",[v._v("什么是上下文映射？为什么需要上下文映射？")]),v._v(" "),_("li",[v._v("上下文映射有哪些模式？")]),v._v(" "),_("li",[v._v("各个上下文模式的含义与应用")])]),v._v(" "),_("blockquote",[_("p",[v._v("什么是上下文映射")])]),v._v(" "),_("ul",[_("li",[v._v("上下文映射是指限界上下文之间的模型映射关系")]),v._v(" "),_("li",[v._v("描述团队之间的协作关系以及上下文之间的集成关系")]),v._v(" "),_("li",[v._v("决定上下文之间如何集成以及如何设置防腐层")])]),v._v(" "),_("blockquote",[_("p",[v._v("上下文映射模式")])]),v._v(" "),_("p",[_("img",{attrs:{src:"/ddd.assets/%E4%B8%8A%E4%B8%8B%E6%96%87%E6%98%A0%E5%B0%84%E6%A8%A1%E5%BC%8F.drawio-167914284144846.png",alt:""}})]),v._v(" "),_("blockquote",[_("p",[v._v("开放主机服务")])]),v._v(" "),_("ul",[_("li",[_("p",[v._v("服务提供方为所有消费方提供一套公共的API")])]),v._v(" "),_("li",[_("p",[v._v("针对通用的功能和模型")]),v._v(" "),_("p",[_("img",{attrs:{src:"/ddd.assets/%E6%A1%88%E4%BE%8B%E6%94%AF%E4%BB%98%E4%B8%8A%E4%B8%8B%E6%96%87.drawio-167914284144848.png",alt:""}})])])]),v._v(" "),_("blockquote",[_("p",[v._v("顺从者")])]),v._v(" "),_("ul",[_("li",[v._v("没有模型到模型的转换")]),v._v(" "),_("li",[v._v("一个上下文沿用另一个上下文的部分模型")])]),v._v(" "),_("blockquote",[_("p",[v._v("大泥球")])]),v._v(" "),_("ul",[_("li",[v._v("由混杂的模型构成糟糕系统，模型不稳定且难于维护")]),v._v(" "),_("li",[v._v("于大泥球合作的上下文要确保自身不被污染，设置防辅层")])]),v._v(" "),_("blockquote",[_("p",[v._v("防腐层")])]),v._v(" "),_("ul",[_("li",[v._v("把上游上下文的模型转换成自己上下文的模型")]),v._v(" "),_("li",[v._v("是下游上下文中访问外部模型的一个代理层")])]),v._v(" "),_("blockquote",[_("p",[v._v("共享内核")])]),v._v(" "),_("ul",[_("li",[v._v("两个上下文共享部分模型")]),v._v(" "),_("li",[v._v("包括但不限于代码、jar包、.so、数据库表等等")]),v._v(" "),_("li",[v._v("慎用，仅当团队紧密合作且共享部分稳定")])]),v._v(" "),_("blockquote",[_("p",[v._v("合伙人")])]),v._v(" "),_("ul",[_("li",[v._v("技术无关，是一种团队协作关系")]),v._v(" "),_("li",[v._v("两个团队之间可以随时互通有无，协同变更")])]),v._v(" "),_("blockquote",[_("p",[v._v("客户/供应商")])]),v._v(" "),_("ul",[_("li",[v._v("下游上下文可以向上游上下文提供需求")]),v._v(" "),_("li",[v._v("一般用于核心域与非核心域之间的协作")])]),v._v(" "),_("p",[_("img",{attrs:{src:"/ddd.assets/%E5%AE%A2%E6%88%B7%E4%BE%9B%E5%BA%94%E5%95%86%E6%A8%A1%E5%BC%8F.drawio-167914284144850.png",alt:""}})]),v._v(" "),_("p",[v._v("假设我们依赖业务中台，那么我们与业务中台，中台是上游，我们是下游，那我们是=是顺从者，还是客户/供应商的上下文关系呢？中台应该是低姿态的一方，中台的价值在于整合各个业务相对成熟通用的部分，并沉淀对业务有价值的通用组件，中台的价值一定要也只能体现在业务上，而业务呢也只能是下游的上下文。但是中台也有中台的难处，为什么这么说呢？当我们要顺从上下文的时候，自己的上下文就很容易变成大泥球，如果我们要给多个上下游当供应商会怎么样呢？其实也是一样的，所以中台也很容易变成大泥球，他的模型很难稳定下来，它的设计是非常需要智慧和技巧的，也需要具备一定的开放性，中台团队不给力，总是要让下游当顺从者，最后中台很可能变得形同虚设，下游的上下文在被逼无奈的情况下可能会选择分道扬镳。")]),v._v(" "),_("blockquote",[_("p",[v._v("“分道扬镳”")])]),v._v(" "),_("ul",[_("li",[v._v("两个上下文无协作，各自独立")]),v._v(" "),_("li",[v._v("当两个上下文之间的集成成本过高")])]),v._v(" "),_("p",[_("img",{attrs:{src:"/ddd.assets/%E5%88%86%E9%81%93%E6%89%AC%E9%95%B3.drawio-167914284144952.png",alt:""}})]),v._v(" "),_("blockquote",[_("p",[v._v("公开语言")])]),v._v(" "),_("ul",[_("li",[v._v("标准化与协议化的模型")]),v._v(" "),_("li",[v._v("所有上下文都可以与公开语言中的模型进行转换")]),v._v(" "),_("li",[v._v("对接了公开语言的上下文之间可以实现组件化对接")])]),v._v(" "),_("p",[v._v("例子：")]),v._v(" "),_("ul",[_("li",[v._v("蓝牙协议，tcp/ip")]),v._v(" "),_("li",[v._v("Java 生态的 jdbc、jvm 标准等")]),v._v(" "),_("li",[v._v("SQL")])]),v._v(" "),_("blockquote",[_("p",[v._v("项目案例的上下文映射关系")])]),v._v(" "),_("p",[_("img",{attrs:{src:"/ddd.assets/%E9%A1%B9%E7%9B%AE%E4%B8%8A%E4%B8%8B%E6%96%87%E6%98%A0%E5%B0%84.drawio-167914284144954.png",alt:""}})]),v._v(" "),_("blockquote",[_("p",[v._v("小结")])]),v._v(" "),_("ul",[_("li",[v._v("上下文，团队之间的关系，重叠模型的映射关系")]),v._v(" "),_("li",[v._v("上下文映射有九种模式")])]),v._v(" "),_("p",[v._v("团队明确自己的定位，怎么样与其他团队协作")]),v._v(" "),_("h3",{attrs:{id:"用分层架构隔离领域模型"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#用分层架构隔离领域模型"}},[v._v("#")]),v._v(" 用分层架构隔离领域模型")]),v._v(" "),_("ul",[_("li",[v._v("为什么要隔离领域模型")]),v._v(" "),_("li",[v._v("DDD传统四层架构和洋葱（六边形）架构")]),v._v(" "),_("li",[v._v("如何建立分层架构")])]),v._v(" "),_("blockquote",[_("p",[v._v("模型驱动设计和分层架构")])]),v._v(" "),_("ul",[_("li",[v._v("严格按照领域模型来编写代码")]),v._v(" "),_("li",[v._v("建模和实现中都有破坏该原则的因素")]),v._v(" "),_("li",[v._v("架构分层能够避免模型在实现过程中被省略或者污染")])]),v._v(" "),_("blockquote",[_("p",[v._v("分层架构是一种古来的技术传统")])]),v._v(" "),_("p",[v._v("传统架构如MVC缺点：围绕数据编程，变成贫血模型，业务被存储层绑架，业务与技术混杂在一起，领域模型也被技术方案绑架，最后如果需要替换存储，改变技术方案，可能业务代码也需要进行巨大的修改。可能有的同学会说，我们不是也做过分层吗？【client， controller，dao，entity，service】其实这些分层是不够的")]),v._v(" "),_("blockquote",[_("p",[v._v("传统方式的问题")])]),v._v(" "),_("ul",[_("li",[v._v("领域模型易被省略掉，变成贫血模型")]),v._v(" "),_("li",[v._v("容易演变成基于数据的设计，一切从表结构开始")]),v._v(" "),_("li",[v._v("领域模型与技术实现混杂，易被技术实现绑架")])]),v._v(" "),_("blockquote",[_("p",[v._v("DDD 传统四层架构")])]),v._v(" "),_("p",[_("img",{attrs:{src:"/ddd.assets/DDD%E4%BC%A0%E7%BB%9F%E5%9B%9B%E5%B1%82%E6%9E%B6%E6%9E%84.drawio-167914284144956.png",alt:""}})]),v._v(" "),_("p",[v._v("接口层：外部通信，如协议的解析封装，路由等待等")]),v._v(" "),_("p",[v._v("应用层：主要面向问题空间，指挥领域模型和基础设施来完成用户故事，工作包括像事务的控制，事件订阅，从资源库读写模型等等。")]),v._v(" "),_("p",[v._v("领域层：核心层，包含了我们领域中的领域模型，领域中的实体，资源库，领域事件，工厂等等元素")]),v._v(" "),_("p",[v._v("基础设施：通用的框架，工具，数据库表，存储访问等等")]),v._v(" "),_("p",[v._v("以交易上下文为例：")]),v._v(" "),_("ul",[_("li",[v._v("application.service\n"),_("ul",[_("li",[v._v("TradeService")])])]),v._v(" "),_("li",[v._v("domain\n"),_("ul",[_("li",[v._v("entity\n"),_("ul",[_("li",[v._v("Order")]),v._v(" "),_("li",[v._v("OderState")]),v._v(" "),_("li",[v._v("SlotVendingMachine【货道售卖机】")])])]),v._v(" "),_("li",[v._v("repository\n"),_("ul",[_("li",[v._v("impl【资源库的具体实现】\n"),_("ul",[_("li",[v._v("OderRepositoryImpl")]),v._v(" "),_("li",[v._v("SlotVendingMachineRepositoryImpl")])])]),v._v(" "),_("li",[v._v("OrderRepository")]),v._v(" "),_("li",[v._v("SlotVendingMachineRepository")])])]),v._v(" "),_("li",[v._v("service\n"),_("ul",[_("li",[v._v("OrderService")])])])])]),v._v(" "),_("li",[v._v("infrastructure\n"),_("ul",[_("li",[v._v("dao")]),v._v(" "),_("li",[v._v("dataobject")]),v._v(" "),_("li",[v._v("remote")])])]),v._v(" "),_("li",[v._v("interf\n"),_("ul",[_("li",[v._v("controller")]),v._v(" "),_("li",[v._v("vo")])])])]),v._v(" "),_("blockquote",[_("p",[v._v("DDD 传统四层架构解决什么问题")])]),v._v(" "),_("ul",[_("li",[v._v("分离关注点")]),v._v(" "),_("li",[v._v("让领域模型层变得更独立")]),v._v(" "),_("li",[v._v("单向依赖")])]),v._v(" "),_("blockquote",[_("p",[v._v("DDD 传统四层架构的缺陷")])]),v._v(" "),_("ul",[_("li",[v._v("领域层对基础设施层仍然有感知，领域模型和技术实现耦合")])]),v._v(" "),_("blockquote",[_("p",[v._v("依赖倒置和洋葱（六边形）架构")])]),v._v(" "),_("p",[_("img",{attrs:{src:"/ddd.assets/%E5%85%AD%E8%BE%B9%E5%BD%A2%E6%9E%B6%E6%9E%84.drawio-167914284144958.png",alt:""}})]),v._v(" "),_("p",[v._v("核心思想：把领域模型放到了核心层，领域模型变得极其的存粹和独立，围绕他的就是一些适配器，适配器的作用就是完成领域模型和外部系统的数据交换或收发消息和读写数存储。")]),v._v(" "),_("p",[v._v("对交易领域进行改造")]),v._v(" "),_("ul",[_("li",[v._v("adapter\n"),_("ul",[_("li",[v._v("remote [远程服务调用的封装实现] [接口定义在领域层]\n"),_("ul",[_("li",[v._v("VendingMachineServiceAdapter [对领域层的接口进行具体实现]")])])]),v._v(" "),_("li",[v._v("repository.impl [将领域层资源库的实现放到适配器层]\n"),_("ul",[_("li",[v._v("OderRepositoryImpl")]),v._v(" "),_("li",[v._v("SlotVendingMachineRepositoryImpl")])])]),v._v(" "),_("li",[v._v("api [由适配器层完成消息的收发和路由]\n"),_("ul",[_("li",[v._v("vo")]),v._v(" "),_("li",[v._v("controller")])])]),v._v(" "),_("li",[v._v("eventhandler [领域事件监处理器]\n"),_("ul",[_("li",[v._v("failedEventHandler [还是调用领域模型或者应用服务来处理事件]")])])]),v._v(" "),_("li",[v._v("repository.impl  [领域资源库的具体实现]\n"),_("ul",[_("li",[v._v("OrderRepositoryImpl")])])])])]),v._v(" "),_("li",[v._v("application.service\n"),_("ul",[_("li",[v._v("TradeServic [没有太大区别]")])])]),v._v(" "),_("li",[v._v("domain\n"),_("ul",[_("li",[v._v("entity")]),v._v(" "),_("li",[v._v("remote [将基础设施层的接口移动到了领域层]\n"),_("ul",[_("li",[v._v("VendingMachineService [具体的实现也放到了适配器层]")])])]),v._v(" "),_("li",[v._v("repository [领域仓储只保留了适配器层的接口]\n"),_("ul",[_("li",[v._v("OrderRepository")]),v._v(" "),_("li",[v._v("SlotVendingMachineRepository")])])]),v._v(" "),_("li",[v._v("service")])])]),v._v(" "),_("li",[v._v("infrastructure\n"),_("ul",[_("li",[v._v("dao")]),v._v(" "),_("li",[v._v("dataobject")])])])]),v._v(" "),_("p",[v._v("领域的资源库的实现放到了适配器层，领域的资源库只保存接口，因为本质上资源库的实现，完成的是领域模型和数据存储层之间的数据交换。")]),v._v(" "),_("p",[v._v("基础层的远程服务调用拆成了两部分，接口放到了领域层，实现也放到了适配器层，本质上调用其他上下文外部服务，其实就是对上下文映射的一种实现，这种服务调用其实就代表了，从我们上下文看其他上下文的模型是什么样子，所以本质它也是我们的领域模型和其他上下文领域模型的数据交换，我们需要在在这种adapter中完成领域模型的转换，包括防腐层，也可以实现在里面。")]),v._v(" "),_("blockquote",[_("p",[v._v("洋葱（六边形）架构优势")])]),v._v(" "),_("ul",[_("li",[v._v("保持领域层的存粹性，不受其他因素干扰")]),v._v(" "),_("li",[v._v("便于践行模型驱动设计，代码跟随模型")]),v._v(" "),_("li",[v._v("便于把团队精力集中到领域模型")])]),v._v(" "),_("blockquote",[_("p",[v._v("小结")])]),v._v(" "),_("ul",[_("li",[v._v("分层架构有利于实现模型驱动设计")]),v._v(" "),_("li",[v._v("从四层架构到洋葱（六边形）架构 ---- 案例")]),v._v(" "),_("li",[v._v("如何建立分层架构 -- 建立 smartrm 的分层架构（洋葱架构）")])]),v._v(" "),_("h2",{attrs:{id:"初涉战术设计"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#初涉战术设计"}},[v._v("#")]),v._v(" 初涉战术设计")]),v._v(" "),_("ul",[_("li",[v._v("什么是实体和值对象")]),v._v(" "),_("li",[v._v("为什么要区分实体和值对象")]),v._v(" "),_("li",[v._v("如何区分实体和值对象")])]),v._v(" "),_("h3",{attrs:{id:"什么是实体和值对象"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#什么是实体和值对象"}},[v._v("#")]),v._v(" 什么是实体和值对象")]),v._v(" "),_("ul",[_("li",[v._v("实体\n"),_("ul",[_("li",[v._v("主要由标识定义的对象被称作 ENTITY")])])]),v._v(" "),_("li",[v._v("值对象\n"),_("ul",[_("li",[v._v("用于描述领域的某个方面，而本身没有概念标识的对象称为值对象")])])])]),v._v(" "),_("p",[v._v("需要以ID来跟踪状态变化的对象为实体，否则为值对象")]),v._v(" "),_("blockquote",[_("p",[v._v("对象的相等性")])]),v._v(" "),_("ul",[_("li",[v._v("标识符相等性 ， 如：身份证号  中国公民")]),v._v(" "),_("li",[v._v("引用（指针）相等性（领域中价值不是很大，可以先不考虑）")]),v._v(" "),_("li",[v._v("属性相等性，如：品牌，版本，容量，制式  指向一个手机型号")])]),v._v(" "),_("p",[v._v("实体：")]),v._v(" "),_("ul",[_("li",[v._v("ID 相等性")]),v._v(" "),_("li",[v._v("要跟踪状态变化")])]),v._v(" "),_("p",[v._v("值对象")]),v._v(" "),_("ul",[_("li",[v._v("属性相等性")]),v._v(" "),_("li",[v._v("可互换")]),v._v(" "),_("li",[v._v("不变性")])]),v._v(" "),_("h3",{attrs:{id:"为什么要区分实体和值对象"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#为什么要区分实体和值对象"}},[v._v("#")]),v._v(" 为什么要区分实体和值对象")]),v._v(" "),_("ul",[_("li",[v._v("值对象往往更轻量级")]),v._v(" "),_("li",[v._v("值对象不用跟踪状态变化")]),v._v(" "),_("li",[v._v("实体和值对象在领域中扮演的角色不一样")])]),v._v(" "),_("p",[v._v("尽可能使用值对象而不是实体")]),v._v(" "),_("p",[v._v("实体可以作为聚合的聚合根，而值对象是不可以的")]),v._v(" "),_("p",[v._v("为了更好的建立领域模型，并且用更低的成本去实现领域模型")]),v._v(" "),_("blockquote",[_("p",[v._v("分辨实体和值对象")])]),v._v(" "),_("ul",[_("li",[v._v("根据上述技术特征")]),v._v(" "),_("li",[v._v("更直观的领域模型特点\n"),_("ul",[_("li",[v._v("是否只读")]),v._v(" "),_("li",[v._v("生命周期是否跨越活动")])])])]),v._v(" "),_("h3",{attrs:{id:"领域对象的构造"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#领域对象的构造"}},[v._v("#")]),v._v(" 领域对象的构造")]),v._v(" "),_("h3",{attrs:{id:"聚合"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#聚合"}},[v._v("#")]),v._v(" 聚合")]),v._v(" "),_("p",[v._v("一个上下文中存在多个领域对象，每个领域对象需要强一致性，使用聚合实现是非常合适的。")]),v._v(" "),_("p",[v._v("也需要灵活的使用聚合，在一些特殊场景下")]),v._v(" "),_("h3",{attrs:{id:"领域服务"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#领域服务"}},[v._v("#")]),v._v(" 领域服务")]),v._v(" "),_("p",[v._v("领域服务中只写业务，应用服务则负责指挥领域对象配合完成工作。")]),v._v(" "),_("ul",[_("li",[v._v("业务逻辑是否可以放在实体或值对象\n"),_("ul",[_("li",[v._v("仅在必要的时候引入领域服务")])])]),v._v(" "),_("li",[v._v("相关代码是属于领域服务还是应用层\n"),_("ul",[_("li",[v._v("领域服务于应用层服务的区别")])])])]),v._v(" "),_("h3",{attrs:{id:"应用层"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#应用层"}},[v._v("#")]),v._v(" 应用层")]),v._v(" "),_("ul",[_("li",[v._v("应用层的定义和职责")]),v._v(" "),_("li",[v._v("应用层的实现方法")])]),v._v(" "),_("blockquote",[_("p",[v._v("什么是应用层")])]),v._v(" "),_("p",[v._v("“定义软件要完成的任务，并且指挥表达领域概念的对象来解决问题。这个一层所负责的工作对业务来说意义重大，也是与其他系统的应用层进行交互的必要渠道应用层要尽量简单，不包含业务规则或则知识，而只为下一层中的领域对象协调任务，分配工作，使他们相互协作”  --- Eric Evans 《领域驱动设计》")]),v._v(" "),_("blockquote",[_("p",[v._v("应用层的职责")])]),v._v(" "),_("ul",[_("li",[v._v("事务控制")]),v._v(" "),_("li",[v._v("身份认证和访问权限")]),v._v(" "),_("li",[v._v("定时任务调度")]),v._v(" "),_("li",[v._v("事件订阅\n"),_("ul",[_("li",[v._v("事件监听（适配层）")]),v._v(" "),_("li",[v._v("事件处理（应用层）")])])])]),v._v(" "),_("blockquote",[_("p",[v._v("应用服务和领域服务的区别")])]),v._v(" "),_("ul",[_("li",[v._v("应用服务（不包含业务逻辑）\n"),_("ul",[_("li",[v._v("事务控制")]),v._v(" "),_("li",[v._v("访问权限")]),v._v(" "),_("li",[v._v("任务调度")]),v._v(" "),_("li",[v._v("调用领域层")])])]),v._v(" "),_("li",[v._v("领域服务\n"),_("ul",[_("li",[v._v("业务逻辑")])])])]),v._v(" "),_("blockquote",[_("p",[v._v("小结")])]),v._v(" "),_("ul",[_("li",[v._v("应用层是调用领域模型完成用户需求的地方")]),v._v(" "),_("li",[v._v("应用层的实现\n"),_("ul",[_("li",[v._v("事务")]),v._v(" "),_("li",[v._v("鉴权")]),v._v(" "),_("li",[v._v("任务调度")])])])]),v._v(" "),_("h3",{attrs:{id:"本章总结"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#本章总结"}},[v._v("#")]),v._v(" 本章总结")]),v._v(" "),_("ul",[_("li",[v._v("适配层的实现")]),v._v(" "),_("li",[v._v("与阿里云IoT对接")]),v._v(" "),_("li",[v._v("运行演示")])]),v._v(" "),_("h2",{attrs:{id:"深入战术设计"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#深入战术设计"}},[v._v("#")]),v._v(" 深入战术设计")]),v._v(" "),_("ul",[_("li",[_("strong",[v._v("领域事件")]),v._v("和事件风暴建模法")]),v._v(" "),_("li",[v._v("防腐层的构建")]),v._v(" "),_("li",[v._v("DDD 和 大数据")])]),v._v(" "),_("h3",{attrs:{id:"领域事件为什么重要"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#领域事件为什么重要"}},[v._v("#")]),v._v(" 领域事件为什么重要")]),v._v(" "),_("ul",[_("li",[v._v("领域事件能够驱动建模")]),v._v(" "),_("li",[v._v("领域事件和很多重要思想相关\n"),_("ul",[_("li",[v._v("CQRS")]),v._v(" "),_("li",[v._v("Event Soucing")])])]),v._v(" "),_("li",[v._v("领域事件和大数据处理和分析相关")])]),v._v(" "),_("h3",{attrs:{id:"建模工具"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#建模工具"}},[v._v("#")]),v._v(" 建模工具")]),v._v(" "),_("ul",[_("li",[v._v("便利贴")]),v._v(" "),_("li",[v._v("Miro\n"),_("ul",[_("li",[v._v("在线，可联机协作")]),v._v(" "),_("li",[v._v("免费版体验差")])])]),v._v(" "),_("li",[v._v("draw.io")])]),v._v(" "),_("h3",{attrs:{id:"领域事件"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#领域事件"}},[v._v("#")]),v._v(" 领域事件")]),v._v(" "),_("ul",[_("li",[v._v("什么是领域事件")]),v._v(" "),_("li",[v._v("领域事件的基本属性")]),v._v(" "),_("li",[v._v("领域事件的发布和订阅")]),v._v(" "),_("li",[v._v("领域事件的存储")]),v._v(" "),_("li",[v._v("事件处理的要求")]),v._v(" "),_("li",[v._v("领域事件和大数据分析")])]),v._v(" "),_("blockquote",[_("p",[v._v("什么是领域事件")])]),v._v(" "),_("ul",[_("li",[v._v("领域中发生的任何领域专家会感兴趣的事情")]),v._v(" "),_("li",[v._v("领域事件一般由聚合产生")]),v._v(" "),_("li",[v._v("领域事件不是技术概念")])]),v._v(" "),_("blockquote",[_("p",[v._v("事件命名和基本属性")])]),v._v(" "),_("ul",[_("li",[v._v("命名方法")]),v._v(" "),_("li",[v._v("事件ID")]),v._v(" "),_("li",[v._v("产生时间")])]),v._v(" "),_("p",[v._v("这些属性可以作为领域事件的原始对象的属性方便其他事件继承")]),v._v(" "),_("blockquote",[_("p",[v._v("发布和订阅方式")])]),v._v(" "),_("ul",[_("li",[v._v("外部系统\n"),_("ul",[_("li",[v._v("API 定向通知")]),v._v(" "),_("li",[v._v("API 定时拉取")]),v._v(" "),_("li",[v._v("消息队列【需要注意加密】")])])]),v._v(" "),_("li",[v._v("内部系统\n"),_("ul",[_("li",[v._v("观察者模式")]),v._v(" "),_("li",[v._v("数据库流水")]),v._v(" "),_("li",[v._v("消息队列")])])])]),v._v(" "),_("blockquote",[_("p",[v._v("事件存储")])]),v._v(" "),_("ul",[_("li",[v._v("直接使用消息中间件的存储\n"),_("ul",[_("li",[v._v("冗余机制")]),v._v(" "),_("li",[v._v("做好备份")])])]),v._v(" "),_("li",[v._v("基于数据库\n"),_("ul",[_("li",[v._v("mongodb")]),v._v(" "),_("li",[v._v("postgresql")]),v._v(" "),_("li",[v._v("mysql")]),v._v(" "),_("li",[v._v("分布式")]),v._v(" "),_("li",[v._v("按时间分区")])])])]),v._v(" "),_("blockquote",[_("p",[v._v("事件处理的要求")])]),v._v(" "),_("ul",[_("li",[v._v("顺序性\n"),_("ul",[_("li",[v._v("聚合ID")]),v._v(" "),_("li",[v._v("存储分片")]),v._v(" "),_("li",[v._v("消费分组")])])]),v._v(" "),_("li",[v._v("幂等性\n"),_("ul",[_("li",[v._v("用幂等性代替分布式事务")]),v._v(" "),_("li",[v._v("状态判断或去重")])])])]),v._v(" "),_("h2",{attrs:{id:"从单体到微服务"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#从单体到微服务"}},[v._v("#")]),v._v(" 从单体到微服务")]),v._v(" "),_("ul",[_("li",[v._v("为什么要重构，微服务的优点")]),v._v(" "),_("li",[v._v("微服务的问题和DDD的答案")]),v._v(" "),_("li",[v._v("微服务的基础设施")]),v._v(" "),_("li",[v._v("基于DDD对案例项目进行服务划分")]),v._v(" "),_("li",[v._v("基于微服务架构对案例项目进行改造")]),v._v(" "),_("li",[v._v("基于k8s进行容器编排和服务部署")])]),v._v(" "),_("h3",{attrs:{id:"为什么要微服务和实现微服务的前提基础"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#为什么要微服务和实现微服务的前提基础"}},[v._v("#")]),v._v(" 为什么要微服务和实现微服务的前提基础")]),v._v(" "),_("p",[v._v("当前架构")]),v._v(" "),_("p",[_("img",{attrs:{src:"/ddd.assets/%E5%8D%95%E4%BD%93%E6%9E%B6%E6%9E%84.drawio-167914284144960.png",alt:""}})]),v._v(" "),_("p",[v._v("当前架构的问题：")]),v._v(" "),_("ul",[_("li",[v._v("系统过于庞大，模块过多，系统发布的代价大，多个上下文小伙都必须一同上线")]),v._v(" "),_("li",[v._v("问题分析，问题定位职责不清晰")])]),v._v(" "),_("p",[v._v("微服务架构：")]),v._v(" "),_("p",[_("img",{attrs:{src:"/ddd.assets/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84.drawio-167914284144962.png",alt:""}})]),v._v(" "),_("h3",{attrs:{id:"微服务的好处"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#微服务的好处"}},[v._v("#")]),v._v(" 微服务的好处")]),v._v(" "),_("ul",[_("li",[v._v("技术异构性")]),v._v(" "),_("li",[v._v("容错性")]),v._v(" "),_("li",[v._v("灵活拓展")]),v._v(" "),_("li",[v._v("简化部署")]),v._v(" "),_("li",[v._v("与组织结构匹配")]),v._v(" "),_("li",[v._v("可组合性")]),v._v(" "),_("li",[v._v("方便替代和升级")])]),v._v(" "),_("h3",{attrs:{id:"微服务的基础"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#微服务的基础"}},[v._v("#")]),v._v(" 微服务的基础")]),v._v(" "),_("ul",[_("li",[v._v("服务注册和发现")]),v._v(" "),_("li",[v._v("服务监控")]),v._v(" "),_("li",[v._v("熔断降级")]),v._v(" "),_("li",[v._v("流量控制")]),v._v(" "),_("li",[v._v("安全性")]),v._v(" "),_("li",[v._v("配置管理")])]),v._v(" "),_("h3",{attrs:{id:"微服务的问题"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#微服务的问题"}},[v._v("#")]),v._v(" 微服务的问题")]),v._v(" "),_("ul",[_("li",[v._v("服务划分")])]),v._v(" "),_("p",[v._v("DDD 中 可以使用聚合来划分，该种划分方式，粒度较小，性能开销较大")]),v._v(" "),_("p",[v._v("目前划分一般使用限界上下文进行划分")]),v._v(" "),_("h3",{attrs:{id:"微服务主流方案介绍"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#微服务主流方案介绍"}},[v._v("#")]),v._v(" 微服务主流方案介绍")]),v._v(" "),_("blockquote",[_("p",[v._v("方案一：微服务SDK（框架）")])]),v._v(" "),_("p",[_("img",{attrs:{src:"/ddd.assets/%E5%BE%AE%E6%9C%8D%E5%8A%A1SDK.drawio-167914284144964.png",alt:""}})]),v._v(" "),_("p",[v._v("常见微服务框架：")]),v._v(" "),_("ul",[_("li",[v._v("Spring Boot with Spring Cloud")]),v._v(" "),_("li",[v._v("GoMirco  【go语言下的】")]),v._v(" "),_("li",[v._v("Molecular")]),v._v(" "),_("li",[v._v("Quarkus")]),v._v(" "),_("li",[v._v("Lagom")]),v._v(" "),_("li",[v._v("Axon")])]),v._v(" "),_("blockquote",[_("p",[v._v("方案二：服务网格")])]),v._v(" "),_("p",[_("img",{attrs:{src:"/ddd.assets/%E6%9C%8D%E5%8A%A1%E7%BD%91%E6%A0%BC.drawio-167914284144966.png",alt:""}})]),v._v(" "),_("p",[v._v("无侵入性，相当于老板的司机")]),v._v(" "),_("blockquote",[_("p",[v._v("两总方案对比")])]),v._v(" "),_("ul",[_("li",[v._v("侵入和非侵入性")]),v._v(" "),_("li",[v._v("是否支持技术异构性")])]),v._v(" "),_("h3",{attrs:{id:"基于ddd思想进行服务拆分和重构"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#基于ddd思想进行服务拆分和重构"}},[v._v("#")]),v._v(" 基于DDD思想进行服务拆分和重构")]),v._v(" "),_("p",[v._v("服务划分 -》 基础设施层重构 【事件总线改造，数据库拆分】-》 服务重构【共享内核，服务调用】")]),v._v(" "),_("h3",{attrs:{id:"使用k8s进行容器编排和服务部署"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#使用k8s进行容器编排和服务部署"}},[v._v("#")]),v._v(" 使用k8s进行容器编排和服务部署")]),v._v(" "),_("blockquote",[_("p",[v._v("为什么是k8s以及为什么要学")])]),v._v(" "),_("ul",[_("li",[v._v("Kubernetes 是容器集群管理系统，是一个开源平台")]),v._v(" "),_("li",[v._v("硬件资源管理调度，应用部署的事实标准")]),v._v(" "),_("li",[v._v("业务架构师需要懂运维")])]),v._v(" "),_("blockquote",[_("p",[v._v("K8s Service 的类型")])]),v._v(" "),_("ul",[_("li",[v._v("ClusterIp")]),v._v(" "),_("li",[v._v("NodePort")]),v._v(" "),_("li",[v._v("LoadBalancer")]),v._v(" "),_("li",[v._v("ExternalName")])]),v._v(" "),_("h2",{attrs:{id:"实践中的问题和关键点"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#实践中的问题和关键点"}},[v._v("#")]),v._v(" 实践中的问题和关键点")]),v._v(" "),_("h3",{attrs:{id:"ci-cd的重要性及如何搭建"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#ci-cd的重要性及如何搭建"}},[v._v("#")]),v._v(" CI/CD的重要性及如何搭建")]),v._v(" "),_("ul",[_("li",[v._v("CI （持续集成）\n"),_("ul",[_("li",[v._v("通过自动化流程持续把各个开发者的工作集成到一起，避免过大的集成成本。")])])]),v._v(" "),_("li",[v._v("CD （持续交付）\n"),_("ul",[_("li",[v._v("通过自动化测试和不是流程使软件系统随时处于可发布状态")])])])]),v._v(" "),_("h3",{attrs:{id:"ci-cd最核心的是什么"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#ci-cd最核心的是什么"}},[v._v("#")]),v._v(" CI/CD最核心的是什么？")]),v._v(" "),_("ul",[_("li",[v._v("单元测试 【代码覆盖率】")]),v._v(" "),_("li",[v._v("集成测试")])]),v._v(" "),_("h3",{attrs:{id:"ddd的厂家难问题-争论以及局限性"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#ddd的厂家难问题-争论以及局限性"}},[v._v("#")]),v._v(" DDD的厂家难问题，争论以及局限性")]),v._v(" "),_("blockquote",[_("p",[v._v("资源库与领域服务的区别?")])]),v._v(" "),_("p",[v._v("资源库与领域服务似乎起到的是同一个作用，聚集下方资源提供给上层调用，这两个有什么实际区别吗？")]),v._v(" "),_("p",[v._v("资源库适用于对象存储，领域服务是无处反方的业务逻辑")]),v._v(" "),_("blockquote",[_("p",[v._v("按照DDD 写代码是否会导致过度设计?")])]),v._v(" "),_("p",[v._v("按照DDD写代码似乎对编码的要求与系统理解更复杂了，一个业务是由多个领域对象同时分担处理，要是测试项目紧急加新人进来做新业务，完全无法了解这些领域对象具体提供了哪些服务，由一种系统被过度设计的感觉")]),v._v(" "),_("p",[v._v("DDD 并不适用于解决代码的所有问题，而是用于解决业务复杂性。DDD 是防止过度设计的，因为一切的代码跟着业务走。")]),v._v(" "),_("blockquote",[_("p",[v._v("DDD 是否战略设计的意义要大于战术设计")])]),v._v(" "),_("blockquote",[_("p",[v._v("模型驱动设计和面向数据库表的设计有什么区别？数据驱动的去点是什么？为什么要使用DDD?即使不用DDD，而是面向数据库表开发，也能搭建一套稳定的代码结构。")])]),v._v(" "),_("p",[v._v("作者理解：DDD就是一套方法论，一个作用是用于拉齐项目中各个角色对于需求的认知，高效率的让项目中涉及的“知识”在团队内流转，这个是扎略涉及的作用；另一个作用就是将战略实际划分领域模型，通过使用展示涉及的各种“武器”，比如实体，值对象，仓储层，防腐层等等，将领域模型落地成高度抽象且领域层稳定的代码。")]),v._v(" "),_("p",[v._v("但是我有个问题是在DDD中是不是战略设计意义要大于战术设计，因为我之前做代码设计的时候，那时候不知道防腐层等概念，但是还是会做类似的抽象，经过良好抽象的代码即使是那种“事务脚本”的形式也是稳定的，所以我感觉如果仅仅是代码层面的问题只要是进行了良好抽象其实无论是面向数据还是面向领域是没有区别的？")]),v._v(" "),_("p",[v._v("问这个问题的原因是我在之前做项目的时候提出要使用DDD，然后我的老板问为什么要用，我表达了战术设计能够指导代码抽象等观点，然后我的老板就说这是代码设计层面的问题，我感觉我没有办法反驳。")]),v._v(" "),_("p",[v._v("DDD和面向数据库表开发有什么区别，因为我理解只要做好代码设计，即使不用DDD，而是面向数据库表开发，也能搭建一套稳定的代码结构。")]),v._v(" "),_("p",[v._v("---- 使用DDD理论下，对开发的过程可以使用理论对当前的代码以及架构进行评估，而不是面向数据库表开发，后期遇到变动而无法解决才暴露问题。")]),v._v(" "),_("h2",{attrs:{id:"总结与展望"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#总结与展望"}},[v._v("#")]),v._v(" 总结与展望")]),v._v(" "),_("h3",{attrs:{id:"ddd的核心思想与方法回顾"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#ddd的核心思想与方法回顾"}},[v._v("#")]),v._v(" DDD的核心思想与方法回顾")]),v._v(" "),_("p",[_("img",{attrs:{src:"/ddd.assets/%E5%BB%BA%E6%A8%A1%E5%92%8C%E8%AE%BE%E8%AE%A1%E6%95%B4%E4%BD%93%E6%B5%81%E7%A8%8B.drawio-16791428414371.png",alt:""}})]),v._v(" "),_("blockquote",[_("p",[v._v("Domain storytelling 中边界特征  --- 用于区分限界上下文方法一")])]),v._v(" "),_("ul",[_("li",[v._v("单向联系")]),v._v(" "),_("li",[v._v("语义区别")]),v._v(" "),_("li",[v._v("活动的触发方式不一样")])]),v._v(" "),_("blockquote",[_("p",[v._v("基于领域划分的基础上进行限界上下文划分")])]),v._v(" "),_("p",[_("img",{attrs:{src:"/ddd.assets/%E5%9F%BA%E4%BA%8E%E5%AD%90%E5%9F%9F%E5%88%92%E5%88%86%E9%99%90%E7%95%8C%E4%B8%8A%E4%B8%8B%E6%96%87.drawio-167914284145068.png",alt:""}})]),v._v(" "),_("p",[v._v("通过分别从各个子域的用户故事中提取关键概念，审视他们之间的关系，以及他们与外部系统之间的关系，我们可以梳理出系统中的限界上下文。如下图所示：")]),v._v(" "),_("p",[_("img",{attrs:{src:"/ddd.assets/%E5%AD%90%E5%9F%9F%E6%8F%90%E5%8F%96%E5%90%8D%E8%AF%8D%E5%88%92%E5%88%86%E4%B8%8A%E4%B8%8B%E6%96%87.drawio-167914284145070.png",alt:""}})]),v._v(" "),_("p",[v._v("更简便的划分方法，也需要更多的检验，可以在战术设计阶段确定聚合后，回来检验限界上下文，因为聚合是限界上下文最小的粒度")]),v._v(" "),_("blockquote",[_("p",[v._v("上下文映射模式")])]),v._v(" "),_("p",[v._v("九种上下文的模式")])])}),[],!1,null,null,null);_.default=t.exports}}]);