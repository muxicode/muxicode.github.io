(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{301:function(_,a,v){"use strict";v.r(a);var t=v(14),r=Object(t.a)({},(function(){var _=this,a=_._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[a("h1",{attrs:{id:"体系学习算法导读"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#体系学习算法导读"}},[_._v("#")]),_._v(" 体系学习算法导读")]),_._v(" "),a("p",[_._v("一天，小明的老板交了一个任务，听起来简直不可能：要优化公司的货物配送路线，降低成本，提高效率。这个问题一直是公司的心头病，众多聪明的头脑都束手无策。 😰")]),_._v(" "),a("p",[_._v("小明心情一度低落，然后突然想起了那个曾经听过的关于算法的神奇故事。他决定深入研究算法，看看是否可以用它们来化解这个看似不可逾越的难题。 💪🤓")]),_._v(" "),a("p",[_._v("他花了好几周的时间，钻研各种算法，包括贪婪算法、动态规划和最短路径算法。他不厌其烦地浏览了一堆在线课程、博客和书籍，不断吸取知识的养分，然后将这些宝贵的知识融入到实际问题中。 📚💻")]),_._v(" "),a("p",[_._v("最后，小明创造了一个令人惊叹的自定义算法，能在几秒钟内找到货物配送的完美路径。这不仅降低了公司的开支，还让配送过程更为高效，老板惊叹不已，满意度爆表！🚚📈")]),_._v(" "),a("p",[_._v("所以，亲爱的小伙伴们，学习算法并不是一件枯燥无味的事情，它可以改变你的职业生涯，让你成为解决复杂问题的超级英雄！不要害怕挑战，让算法成为你的朋友，探索编程世界的奇妙之处吧！💻")]),_._v(" "),a("p",[_._v("小明是怎么解决问题的呢？赶快开启我们体系化学习吧！🚀")]),_._v(" "),a("h2",{attrs:{id:"为什么需要体系学习算法-📚"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么需要体系学习算法-📚"}},[_._v("#")]),_._v(" 为什么需要体系学习算法？📚")]),_._v(" "),a("p",[_._v("体系学习算法对于计算机科学和数据科学领域的从业者来说是至关重要的。它不仅有助于个人的职业发展，还为解决复杂问题提供了坚实的基础。")]),_._v(" "),a("p",[_._v("🧠 "),a("strong",[_._v("建立坚实的算法基础")]),_._v("：体系学习算法有助于建立坚实的算法基础，这对于处理各种计算机科学和数据科学问题至关重要。无论是在编程竞赛、工程项目还是数据分析中，算法都是解决问题的核心。")]),_._v(" "),a("p",[_._v("📈 "),a("strong",[_._v("提高问题解决能力")]),_._v("：通过深入学习算法，你将能够更好地理解问题的本质，并开发出更高效、更优化的解决方案。这不仅有助于提高工作效率，还可以在竞争激烈的行业中脱颖而出。")]),_._v(" "),a("p",[_._v("💡 "),a("strong",[_._v("培养抽象思维能力")]),_._v("：算法的学习过程需要抽象思维，因为你需要将问题抽象化并设计出通用的解决方案。这种思维方式对于解决各种领域的问题都非常有用。")]),_._v(" "),a("p",[_._v("🌐 "),a("strong",[_._v("适用于多领域")]),_._v("：算法不仅仅在计算机科学领域有用。它们在人工智能、机器学习、数据科学、图像处理、自然语言处理等多个领域都有广泛的应用。体系学习算法为跨领域的应用打下了坚实的基础。")]),_._v(" "),a("p",[_._v("🧩 "),a("strong",[_._v("了解计算复杂性")]),_._v("：学习算法还有助于理解不同问题的计算复杂性。这对于选择合适的算法来解决问题以及评估解决方案的效率至关重要。")]),_._v(" "),a("p",[_._v("💻 "),a("strong",[_._v("职业发展和竞争力")]),_._v("：在今天的职场中，拥有算法知识可以大幅提升你的竞争力。许多技术公司的面试过程中都包括算法和数据结构的问题。")]),_._v(" "),a("p",[_._v("总的来说，体系学习算法不仅有助于解决各种计算问题，还有助于培养抽象思维、提高问题解决能力，为职业发展打下坚实的基础。无论你是计算机科学专业的学生还是从业者，深入学习算法都将对你的职业生涯产生积极的影响。不断学习和实践算法，让你在不断变化的技术领域中保持竞争力。💪🚀")]),_._v(" "),a("h2",{attrs:{id:"学习路线"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#学习路线"}},[_._v("#")]),_._v(" 学习路线")]),_._v(" "),a("h3",{attrs:{id:"🌱-阶段一-初出茅庐-🌱"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🌱-阶段一-初出茅庐-🌱"}},[_._v("#")]),_._v(" 🌱 "),a("strong",[_._v("阶段一：初出茅庐")]),_._v(" 🌱")]),_._v(" "),a("p",[_._v("我就像一颗刚刚发芽的小苗，刚刚踏入了计算机编程的世界。我学习了基础的编程语言和工具，开始了我的编程之旅。这是我计算机科学的种子阶段，一切都是那么新奇，充满了探索的乐趣。"),a("a",{attrs:{href:"/algorithm/base_1_binary_0_binary"}},[_._v("入门篇")])]),_._v(" "),a("h4",{attrs:{id:"🌱-算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🌱-算法"}},[_._v("#")]),_._v(" 🌱 算法")]),_._v(" "),a("h5",{attrs:{id:"👉-位运算"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#👉-位运算"}},[_._v("#")]),_._v(" 👉 "),a("a",{attrs:{href:"/algorithm/g1_base_1_binary_0_binary"}},[_._v("位运算")])]),_._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"/algorithm/g1_base_binary_0_binary"}},[_._v("为什么要学二进制？")])]),_._v(" "),a("li",[a("a",{attrs:{href:"/algorithm/g1_base_binary_1_gte_binary"}},[a("code",[_._v("int")]),_._v("类型的二进制")])]),_._v(" "),a("li",[a("a",{attrs:{href:"/algorithm/g1_base_binary_2_binary_calc"}},[_._v("二进制实现加减乘除")])]),_._v(" "),a("li",[a("a",{attrs:{href:"/algorithm/g1_base_binary_4_change_num_without_variable"}},[_._v("不用中间变量交换两个数")])]),_._v(" "),a("li",[a("a",{attrs:{href:"/algorithm/g1_base_binary_3_bit_map"}},[_._v("位图")])]),_._v(" "),a("li",[a("a",{attrs:{href:"/algorithm/g1_base_binary_5_find_odd_times_num"}},[_._v("找到出现次数奇数次的数")])]),_._v(" "),a("li",[a("a",{attrs:{href:"/algorithm/g1_base_binary_6_find_odd_times_2_num"}},[_._v("找到两个出现奇数次的数")])]),_._v(" "),a("li",[a("a",{attrs:{href:"/algorithm/g1_base_binary_7_find_k_times_num"}},[_._v("找到出现次数为K次的数")])]),_._v(" "),a("li",[_._v("N皇后问题的加速实现（建议递归到动态规划回顾）")])]),_._v(" "),a("h5",{attrs:{id:"👉-排序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#👉-排序"}},[_._v("#")]),_._v(" 👉 排序")]),_._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"/algorithm/g1_base_5_line_code01_select_sort"}},[_._v("选择排序")])]),_._v(" "),a("li",[a("a",{attrs:{href:"/algorithm/g1_base_6_line_code02_bubble_sort"}},[_._v("冒泡排序")])]),_._v(" "),a("li",[a("a",{attrs:{href:"/algorithm/g1_base_7_line_code03_insert_sort"}},[_._v("插入排序")])]),_._v(" "),a("li",[_._v("归并排序")]),_._v(" "),a("li",[_._v("快速排序")]),_._v(" "),a("li",[_._v("堆排序")]),_._v(" "),a("li",[_._v("计数排序")]),_._v(" "),a("li",[_._v("基数排序")]),_._v(" "),a("li",[_._v("排序大总结&避坑指南")])]),_._v(" "),a("h5",{attrs:{id:"👉-对数器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#👉-对数器"}},[_._v("#")]),_._v(" 👉 对数器")]),_._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"/algorithm/g1_compare_for_ans"}},[_._v("对数器的使用")])])]),_._v(" "),a("h5",{attrs:{id:"👉-二分及其拓展"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#👉-二分及其拓展"}},[_._v("#")]),_._v(" 👉 二分及其拓展")]),_._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"/algorithm/g1_bisectiom_1_find_num"}},[_._v("有序数组中查找数字")])]),_._v(" "),a("li",[a("a",{attrs:{href:"/algorithm/g1_bisection_2_bs_left"}},[_._v("有序数组查大于等于"),a("code",[_._v("num")]),_._v("的最左位置")])]),_._v(" "),a("li",[a("a",{attrs:{href:"/algorithm/g1_bisection_2_bs_right"}},[_._v("有序数组查小于等于"),a("code",[_._v("num")]),_._v("的最右位置")])]),_._v(" "),a("li",[a("a",{attrs:{href:"/algorithm/g1_bisection_4_local_min"}},[_._v("局部最小问题")])])]),_._v(" "),a("h5",{attrs:{id:"👉-递归到动态规划"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#👉-递归到动态规划"}},[_._v("#")]),_._v(" 👉 递归到动态规划")]),_._v(" "),a("ul",[a("li",[_._v("递归行为\n"),a("ul",[a("li",[_._v("Master 公式")]),_._v(" "),a("li",[_._v("汉诺塔问题")]),_._v(" "),a("li",[_._v("生成全子序列")]),_._v(" "),a("li",[_._v("生成全排列")]),_._v(" "),a("li",[_._v("对数器方法与递归")])])]),_._v(" "),a("li",[_._v("动态规划\n"),a("ul",[a("li",[_._v("从左到右尝试模型\n"),a("ul",[a("li",[_._v("背包类问题")]),_._v(" "),a("li",[_._v("数字字符串转英文字符串")]),_._v(" "),a("li",[_._v("贴纸问题")]),_._v(" "),a("li",[_._v("货币找零方法数的系列问题")]),_._v(" "),a("li",[_._v("货币找零的最小张数问题")]),_._v(" "),a("li",[_._v("累加和对半数组划分系列问题")])])]),_._v(" "),a("li",[_._v("区间范围尝试模型\n"),a("ul",[a("li",[_._v("纸牌游戏")]),_._v(" "),a("li",[_._v("最长回文子序列")])])]),_._v(" "),a("li",[_._v("样本对应尝试模型\n"),a("ul",[a("li",[_._v("最长公共子序列")]),_._v(" "),a("li",[_._v("最短路径和")]),_._v(" "),a("li",[_._v("Bob生存概率问题")]),_._v(" "),a("li",[_._v("砍死怪兽概率问题")]),_._v(" "),a("li",[_._v("分裂数字问题")])])]),_._v(" "),a("li",[_._v("业务限制尝试模型\n"),a("ul",[a("li",[_._v("机器人行进问题")]),_._v(" "),a("li",[_._v("象棋跳马问题")]),_._v(" "),a("li",[_._v("和咖啡问题")]),_._v(" "),a("li",[_._v("N皇后问题的加速实现")])])])])])]),_._v(" "),a("h4",{attrs:{id:"🌱-数据结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🌱-数据结构"}},[_._v("#")]),_._v(" 🌱  数据结构")]),_._v(" "),a("h5",{attrs:{id:"👉-链表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#👉-链表"}},[_._v("#")]),_._v(" 👉 链表")]),_._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"/algorithm/g1_data_struct_linked_list_1_reverse"}},[_._v("反转链表")])]),_._v(" "),a("li",[a("a",{attrs:{href:"/algorithm/g1_data_struct_linked_list_2_delete"}},[_._v("链表中删除指定数字")])]),_._v(" "),a("li",[_._v("取链表的中点")]),_._v(" "),a("li",[_._v("K个节点之间逆序")]),_._v(" "),a("li",[_._v("合并两个有序链表")]),_._v(" "),a("li",[_._v("判断链表的回文结构")]),_._v(" "),a("li",[_._v("链表三分")]),_._v(" "),a("li",[_._v("拷贝含有随机指针的链表")]),_._v(" "),a("li",[_._v("链表相交的系列问题")])]),_._v(" "),a("h5",{attrs:{id:"👉-队列"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#👉-队列"}},[_._v("#")]),_._v(" 👉 队列")]),_._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"/algorithm/g1_data_struct_queue_1_double_ends_queue"}},[_._v("双端队列")])]),_._v(" "),a("li",[a("a",{attrs:{href:"/algorithm/g1_data_struct_queue_2_double_queue"}},[_._v("队列")])]),_._v(" "),a("li",[a("a",{attrs:{href:"/algorithm/g1_data_struct_queue_3_double_queue_by_2_stack"}},[_._v("两个栈实现队列")])])]),_._v(" "),a("h5",{attrs:{id:"👉-栈"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#👉-栈"}},[_._v("#")]),_._v(" 👉 栈")]),_._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"/algorithm/g1_data_struct_stack_1_stack"}},[_._v("栈")])]),_._v(" "),a("li",[a("a",{attrs:{href:"/algorithm/g1_data_struct_stack_2_min_stack"}},[_._v("栈的最小值")])]),_._v(" "),a("li",[a("a",{attrs:{href:"/algorithm/g1_data_struct_stack_3_stack_by_2_queue"}},[_._v("两个队列实现栈")])])]),_._v(" "),a("h5",{attrs:{id:"👉-哈希表的使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#👉-哈希表的使用"}},[_._v("#")]),_._v(" 👉 哈希表的使用")]),_._v(" "),a("h5",{attrs:{id:"👉-堆"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#👉-堆"}},[_._v("#")]),_._v(" 👉 堆")]),_._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"/algorithm/g1_base_9_heap"}},[_._v("堆")])])]),_._v(" "),a("h5",{attrs:{id:"👉-加强堆"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#👉-加强堆"}},[_._v("#")]),_._v(" 👉 加强堆")]),_._v(" "),a("h5",{attrs:{id:"👉-前缀树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#👉-前缀树"}},[_._v("#")]),_._v(" 👉 前缀树")]),_._v(" "),a("h5",{attrs:{id:"👉-二叉树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#👉-二叉树"}},[_._v("#")]),_._v(" 👉 二叉树")]),_._v(" "),a("ul",[a("li",[_._v("先序、中序、后序的递归遍历")]),_._v(" "),a("li",[_._v("先序、中序、后序的非递归遍历")]),_._v(" "),a("li",[_._v("相同树问题")]),_._v(" "),a("li",[_._v("相似树问题")]),_._v(" "),a("li",[_._v("二叉树的最大深度问题")]),_._v(" "),a("li",[_._v("根据先序和中序重建二叉树")]),_._v(" "),a("li",[_._v("二叉树的路径和问题")]),_._v(" "),a("li",[_._v("二叉树按层遍历")]),_._v(" "),a("li",[_._v("二叉树的序列化和反序列化")]),_._v(" "),a("li",[_._v("后继、前驱节点")]),_._v(" "),a("li",[_._v("判断完全二叉树")]),_._v(" "),a("li",[_._v("判断搜索二叉树")]),_._v(" "),a("li",[_._v("判断平衡二叉树")]),_._v(" "),a("li",[_._v("判断满二叉树")]),_._v(" "),a("li",[_._v("递归套路解树形"),a("code",[_._v("dp")]),_._v("问题")])]),_._v(" "),a("h5",{attrs:{id:"👉-并查集"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#👉-并查集"}},[_._v("#")]),_._v(" 👉 并查集")]),_._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"/algorithm/g1_base_8_union_set_1"}},[_._v("并查集的实现")])]),_._v(" "),a("li",[_._v("朋友圈问题")]),_._v(" "),a("li",[_._v("岛问题")])]),_._v(" "),a("h5",{attrs:{id:"👉-图"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#👉-图"}},[_._v("#")]),_._v(" 👉 图")]),_._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"/algorithm/g1_graph_1_base"}},[_._v("图结构")])]),_._v(" "),a("li",[_._v("图算法\n"),a("ul",[a("li",[a("a",{attrs:{href:"/algorithm/g1_graph_2_topology"}},[_._v("拓扑排序")])]),_._v(" "),a("li",[a("a",{attrs:{href:"/algorithm/g1_graph_3_kruskal"}},[a("code",[_._v("Kruskal")]),_._v("算法")])]),_._v(" "),a("li",[a("code",[_._v("Prim")]),_._v("算法")]),_._v(" "),a("li",[a("code",[_._v("Dijkstra")]),_._v("算法")]),_._v(" "),a("li",[a("code",[_._v("Dinic")]),_._v("算法")])])])]),_._v(" "),a("h5",{attrs:{id:"👉-哈夫曼树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#👉-哈夫曼树"}},[_._v("#")]),_._v(" 👉 哈夫曼树")]),_._v(" "),a("h3",{attrs:{id:"🚀-阶段二-知识的升华-🚀"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🚀-阶段二-知识的升华-🚀"}},[_._v("#")]),_._v(" 🚀 "),a("strong",[_._v("阶段二：知识的升华")]),_._v(" 🚀")]),_._v(" "),a("p",[_._v("开始深入研究算法和数据结构。这时，我就像是一名工匠，不断精进自己的技艺。我学习了各种高级算法，不断挑战自己的思维边界。我的编程技能逐渐升级，可以解决更复杂的问题，感觉就像是掌握了一门魔法。")]),_._v(" "),a("h4",{attrs:{id:"🚀算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🚀算法"}},[_._v("#")]),_._v(" 🚀算法")]),_._v(" "),a("h5",{attrs:{id:"👉-斐波那契数列"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#👉-斐波那契数列"}},[_._v("#")]),_._v(" 👉 斐波那契数列")]),_._v(" "),a("ul",[a("li",[_._v("矩阵乘法的解法")]),_._v(" "),a("li",[_._v("有效字符串数量")])]),_._v(" "),a("h5",{attrs:{id:"👉-kmp算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#👉-kmp算法"}},[_._v("#")]),_._v(" 👉 "),a("code",[_._v("KMP")]),_._v("算法")]),_._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"/algorithm/g2_advance_1_kmp_1"}},[_._v("原理和实现讲解")])]),_._v(" "),a("li",[a("a",{attrs:{href:"/algorithm/g2_advance_1_kmp_3_subtrees_same_structure"}},[_._v("包含子树问题")])]),_._v(" "),a("li",[a("a",{attrs:{href:"/algorithm/g2_advance_1_kmp_2_cyclic_string"}},[_._v("反转字符串判断问题")])]),_._v(" "),a("li",[a("a",{attrs:{href:"/algorithm/g2_advance_1_kmp_4_repeated_substring"}},[_._v("重复子字符")])])]),_._v(" "),a("h5",{attrs:{id:"👉-manacher算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#👉-manacher算法"}},[_._v("#")]),_._v(" 👉 "),a("code",[_._v("Manacher")]),_._v("算法")]),_._v(" "),a("ul",[a("li",[_._v("原理和实现讲解")]),_._v(" "),a("li",[_._v("结尾添加字符串变回文")])]),_._v(" "),a("h5",{attrs:{id:"👉-无序数组寻找第-k-小的值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#👉-无序数组寻找第-k-小的值"}},[_._v("#")]),_._v(" 👉 无序数组寻找第 K 小的值")]),_._v(" "),a("ul",[a("li",[_._v("改写快排算法")]),_._v(" "),a("li",[a("code",[_._v("BFPRT")]),_._v("算法")])]),_._v(" "),a("h5",{attrs:{id:"👉-蓄水池算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#👉-蓄水池算法"}},[_._v("#")]),_._v(" 👉 蓄水池算法")]),_._v(" "),a("h5",{attrs:{id:"👉-morris遍历"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#👉-morris遍历"}},[_._v("#")]),_._v(" 👉 "),a("code",[_._v("Morris")]),_._v("遍历")]),_._v(" "),a("h5",{attrs:{id:"👉-资源限制类题目的算法设计"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#👉-资源限制类题目的算法设计"}},[_._v("#")]),_._v(" 👉 资源限制类题目的算法设计")]),_._v(" "),a("h5",{attrs:{id:"👉-打表找规律"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#👉-打表找规律"}},[_._v("#")]),_._v(" 👉  打表找规律")]),_._v(" "),a("ul",[a("li",[_._v("小虎买苹果")]),_._v(" "),a("li",[_._v("吃草维妮塔")]),_._v(" "),a("li",[_._v("连续数累加和判断")])]),_._v(" "),a("h5",{attrs:{id:"👉-根据题目的数量猜解法技巧"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#👉-根据题目的数量猜解法技巧"}},[_._v("#")]),_._v(" 👉  根据题目的数量猜解法技巧")]),_._v(" "),a("ul",[a("li",[_._v("原理")]),_._v(" "),a("li",[_._v("贿赂怪兽问题")]),_._v(" "),a("li",[_._v("分治\n"),a("ul",[a("li",[_._v("分治原理讲解")]),_._v(" "),a("li",[_._v("累加和%m之后的最大值")]),_._v(" "),a("li",[_._v("零食方法数问题")])])])]),_._v(" "),a("h5",{attrs:{id:"👉-卡特兰数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#👉-卡特兰数"}},[_._v("#")]),_._v(" 👉 卡特兰数")]),_._v(" "),a("ul",[a("li",[_._v("原理讲解")]),_._v(" "),a("li",[_._v("原理讲解勘误")]),_._v(" "),a("li",[_._v("1都不少于0的前缀数量问题")]),_._v(" "),a("li",[_._v("求不同二叉树数量")])]),_._v(" "),a("h5",{attrs:{id:"👉-数组三连问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#👉-数组三连问题"}},[_._v("#")]),_._v(" 👉 数组三连问题")]),_._v(" "),a("ul",[a("li",[_._v("窗口技巧")]),_._v(" "),a("li",[_._v("预处理技巧")]),_._v(" "),a("li",[_._v("淘汰可能性技巧\n"),a("ul",[a("li",[_._v("普通数组中累加和小于等于"),a("code",[_._v("num")]),_._v("的最长子数组")]),_._v(" "),a("li",[_._v("平均值小于等于"),a("code",[_._v("v")]),_._v("的最长子数组")])])])]),_._v(" "),a("h5",{attrs:{id:"👉-状态压缩的动态规划"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#👉-状态压缩的动态规划"}},[_._v("#")]),_._v(" 👉 状态压缩的动态规划")]),_._v(" "),a("ul",[a("li",[a("code",[_._v("CanlWin")]),_._v("问题")]),_._v(" "),a("li",[a("code",[_._v("TSP")]),_._v("问题")]),_._v(" "),a("li",[_._v("贴瓷砖问题")])]),_._v(" "),a("h5",{attrs:{id:"👉-设计简化外部信息的动态规划"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#👉-设计简化外部信息的动态规划"}},[_._v("#")]),_._v(" 👉 设计简化外部信息的动态规划")]),_._v(" "),a("ul",[a("li",[_._v("打气球的最大分数")]),_._v(" "),a("li",[_._v("消除箱子问题")]),_._v(" "),a("li",[_._v("泡泡龙游戏")]),_._v(" "),a("li",[_._v("奇怪打印机")]),_._v(" "),a("li",[_._v("数组的恢复方法")])]),_._v(" "),a("h4",{attrs:{id:"🚀数据结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🚀数据结构"}},[_._v("#")]),_._v(" 🚀数据结构")]),_._v(" "),a("h5",{attrs:{id:"👉-窗口内最大值和最小值的更新结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#👉-窗口内最大值和最小值的更新结构"}},[_._v("#")]),_._v(" 👉 窗口内最大值和最小值的更新结构")]),_._v(" "),a("ul",[a("li",[_._v("原理和实现讲解")]),_._v(" "),a("li",[_._v("特殊标准的子数组数量")]),_._v(" "),a("li",[_._v("良好加油站问题")]),_._v(" "),a("li",[_._v("最少找零张数进一步加速")]),_._v(" "),a("li",[_._v("长度小于等于"),a("code",[_._v("M")]),_._v("子数组最大累加和")])]),_._v(" "),a("h5",{attrs:{id:"👉-单调栈"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#👉-单调栈"}},[_._v("#")]),_._v(" 👉 单调栈")]),_._v(" "),a("ul",[a("li",[_._v("原理和实现讲解")]),_._v(" "),a("li",[_._v("累加和最小值最大问题")]),_._v(" "),a("li",[_._v("直方图内最大矩形")]),_._v(" "),a("li",[_._v("全是1的最大矩形")]),_._v(" "),a("li",[_._v("全是1的矩形数量")]),_._v(" "),a("li",[_._v("所有子数组的最小值累加")])]),_._v(" "),a("h5",{attrs:{id:"👉-线段树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#👉-线段树"}},[_._v("#")]),_._v(" 👉 线段树")]),_._v(" "),a("ul",[a("li",[_._v("原理和实现讲解")]),_._v(" "),a("li",[_._v("掉落砖块的最大高度")])]),_._v(" "),a("h5",{attrs:{id:"👉-indextree"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#👉-indextree"}},[_._v("#")]),_._v(" 👉 "),a("code",[_._v("IndexTree")])]),_._v(" "),a("h5",{attrs:{id:"👉-ac自动机"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#👉-ac自动机"}},[_._v("#")]),_._v(" 👉 "),a("code",[_._v("AC")]),_._v("自动机")]),_._v(" "),a("h5",{attrs:{id:"👉-和哈希函数有关的数据结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#👉-和哈希函数有关的数据结构"}},[_._v("#")]),_._v(" 👉  和哈希函数有关的数据结构")]),_._v(" "),a("ul",[a("li",[_._v("哈希表原理和实现")]),_._v(" "),a("li",[_._v("布隆过滤器原理和实现")]),_._v(" "),a("li",[_._v("一致性哈希原理和实现")])]),_._v(" "),a("h5",{attrs:{id:"👉-二维数组调整"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#👉-二维数组调整"}},[_._v("#")]),_._v(" 👉  二维数组调整")]),_._v(" "),a("ul",[a("li",[_._v("转圈打印矩阵")]),_._v(" "),a("li",[_._v("翻转矩阵")]),_._v(" "),a("li",[a("code",[_._v("zigzag")]),_._v("打印矩阵")]),_._v(" "),a("li",[_._v("转圈打印星号")])]),_._v(" "),a("h3",{attrs:{id:"🌟-阶段三-高峰之巅-🌟"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🌟-阶段三-高峰之巅-🌟"}},[_._v("#")]),_._v(" 🌟 "),a("strong",[_._v("阶段三：高峰之巅")]),_._v(" 🌟")]),_._v(" "),a("h4",{attrs:{id:"🌟-算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🌟-算法"}},[_._v("#")]),_._v(" 🌟 算法")]),_._v(" "),a("h5",{attrs:{id:"👉-编辑距离"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#👉-编辑距离"}},[_._v("#")]),_._v(" 👉 编辑距离")]),_._v(" "),a("h5",{attrs:{id:"👉-nimi博弈"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#👉-nimi博弈"}},[_._v("#")]),_._v(" 👉 "),a("code",[_._v("Nimi")]),_._v("博弈")]),_._v(" "),a("h5",{attrs:{id:"👉-括号嵌套求解的递归模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#👉-括号嵌套求解的递归模型"}},[_._v("#")]),_._v(" 👉 括号嵌套求解的递归模型")]),_._v(" "),a("h5",{attrs:{id:"👉-最长递增子序列问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#👉-最长递增子序列问题"}},[_._v("#")]),_._v(" 👉 最长递增子序列问题")]),_._v(" "),a("h5",{attrs:{id:"👉-约瑟夫环问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#👉-约瑟夫环问题"}},[_._v("#")]),_._v(" 👉 约瑟夫环问题")]),_._v(" "),a("h5",{attrs:{id:"👉-完美洗牌问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#👉-完美洗牌问题"}},[_._v("#")]),_._v(" 👉 完美洗牌问题")]),_._v(" "),a("h5",{attrs:{id:"👉-a-算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#👉-a-算法"}},[_._v("#")]),_._v(" 👉 "),a("code",[_._v("A*")]),_._v("算法")]),_._v(" "),a("h5",{attrs:{id:"👉-bellman-ford-算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#👉-bellman-ford-算法"}},[_._v("#")]),_._v(" 👉 "),a("code",[_._v("Bellman Ford")]),_._v(" 算法")]),_._v(" "),a("h5",{attrs:{id:"👉-强连通分量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#👉-强连通分量"}},[_._v("#")]),_._v(" 👉 强连通分量")]),_._v(" "),a("h5",{attrs:{id:"👉-km算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#👉-km算法"}},[_._v("#")]),_._v(" 👉 "),a("code",[_._v("KM")]),_._v("算法")]),_._v(" "),a("h5",{attrs:{id:"👉-扫描线算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#👉-扫描线算法"}},[_._v("#")]),_._v(" 👉 扫描线算法")]),_._v(" "),a("h4",{attrs:{id:"🌟-数据结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🌟-数据结构"}},[_._v("#")]),_._v(" 🌟 数据结构")]),_._v(" "),a("h5",{attrs:{id:"👉-lru"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#👉-lru"}},[_._v("#")]),_._v(" 👉  "),a("code",[_._v("LRU")])]),_._v(" "),a("h5",{attrs:{id:"👉-lfu"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#👉-lfu"}},[_._v("#")]),_._v(" 👉  "),a("code",[_._v("LFU")])]),_._v(" "),a("h5",{attrs:{id:"👉-树链剖分"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#👉-树链剖分"}},[_._v("#")]),_._v(" 👉  树链剖分")]),_._v(" "),a("h5",{attrs:{id:"👉-动态开点下怒单数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#👉-动态开点下怒单数"}},[_._v("#")]),_._v(" 👉  动态开点下怒单数")]),_._v(" "),a("h5",{attrs:{id:"👉-rmq"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#👉-rmq"}},[_._v("#")]),_._v(" 👉 "),a("code",[_._v("RMQ")])]),_._v(" "),a("h4",{attrs:{id:"🌟-练习"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🌟-练习"}},[_._v("#")]),_._v(" 🌟 练习")]),_._v(" "),a("h5",{attrs:{id:"👉-阶段一所有原理-coding复习"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#👉-阶段一所有原理-coding复习"}},[_._v("#")]),_._v(" 👉 阶段一所有原理+coding复习")]),_._v(" "),a("h5",{attrs:{id:"👉-阶段二所有原理-coding复习"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#👉-阶段二所有原理-coding复习"}},[_._v("#")]),_._v(" 👉 阶段二所有原理+coding复习")]),_._v(" "),a("h5",{attrs:{id:"👉-持续刷题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#👉-持续刷题"}},[_._v("#")]),_._v(" 👉 "),a("a",{attrs:{href:"https://github.com/algorithmzuo/class-notes",target:"_blank",rel:"noopener noreferrer"}},[_._v("持续刷题"),a("OutboundLink")],1)]),_._v(" "),a("h5",{attrs:{id:"👉-算法周跟"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#👉-算法周跟"}},[_._v("#")]),_._v(" 👉 算法周跟")]),_._v(" "),a("h3",{attrs:{id:"🔝-阶段四-登峰造极🔝"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🔝-阶段四-登峰造极🔝"}},[_._v("#")]),_._v(" 🔝 "),a("strong",[_._v("阶段四：登峰造极")]),_._v("🔝")]),_._v(" "),a("h4",{attrs:{id:"🔝算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🔝算法"}},[_._v("#")]),_._v(" 🔝算法")]),_._v(" "),a("h5",{attrs:{id:"👉-有序表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#👉-有序表"}},[_._v("#")]),_._v(" 👉 有序表")]),_._v(" "),a("ul",[a("li",[a("code",[_._v("AVL")]),_._v("树的原理和实现")]),_._v(" "),a("li",[a("code",[_._v("SB")]),_._v("树的原理和实现")]),_._v(" "),a("li",[_._v("跳表的原理和实现")]),_._v(" "),a("li",[_._v("各种有序表的对比")]),_._v(" "),a("li",[_._v("改写有序表的相关题目\n"),a("ul",[a("li",[a("code",[_._v("RangeSum")]),_._v("计数问题")]),_._v(" "),a("li",[_._v("窗口中位数问题")]),_._v(" "),a("li",[_._v("高效插入删除读取的数组")])])])]),_._v(" "),a("h5",{attrs:{id:"👉-四边形不等式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#👉-四边形不等式"}},[_._v("#")]),_._v(" 👉 四边形不等式")]),_._v(" "),a("ul",[a("li",[_._v("区间划分问题中的不回退现象")]),_._v(" "),a("li",[_._v("合并石子问题")]),_._v(" "),a("li",[_._v("画匠问题")]),_._v(" "),a("li",[_._v("邮局选址问题")]),_._v(" "),a("li",[_._v("扔蛋问题")])]),_._v(" "),a("h5",{attrs:{id:"👉-后缀数组dc3算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#👉-后缀数组dc3算法"}},[_._v("#")]),_._v(" 👉 后缀数组"),a("code",[_._v("DC3")]),_._v("算法")]),_._v(" "),a("ul",[a("li",[a("code",[_._v("DC3")]),_._v("算法原理和实现")]),_._v(" "),a("li",[_._v("最大字典序的子串")]),_._v(" "),a("li",[_._v("字符串插入得到最大的字典序")]),_._v(" "),a("li",[_._v("生成最大的数字")]),_._v(" "),a("li",[_._v("最长公共子串问题\n"),a("ul",[a("li",[_._v("动态规划的解")]),_._v(" "),a("li",[a("code",[_._v("DC3")]),_._v("算法的解")])])])]),_._v(" "),a("h3",{attrs:{id:"🔮-阶段五-探索未知领域-🔮"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🔮-阶段五-探索未知领域-🔮"}},[_._v("#")]),_._v(" 🔮 "),a("strong",[_._v("阶段五：探索未知领域")]),_._v(" 🔮")]),_._v(" "),a("p",[_._v("让我们一起继续前行，迎接更多的挑战和成就吧！💻🌌")])])}),[],!1,null,null,null);a.default=r.exports}}]);