(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{320:function(t,a,d){"use strict";d.r(a);var r=d(14),s=Object(r.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"ddd导读"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ddd导读"}},[t._v("#")]),t._v(" DDD导读")]),t._v(" "),a("p",[t._v("大家好，我是Bing👋，今天我想和大家聊聊一个很火的话题——DDD（领域驱动设计）🔥。可能有些小伙伴还不太清楚DDD是什么，为什么要学习它，那就让我来给大家科普一下吧😉。")]),t._v(" "),a("h2",{attrs:{id:"ddd是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ddd是什么"}},[t._v("#")]),t._v(" DDD是什么？")]),t._v(" "),a("p",[t._v("DDD（Domain-Driven Design）中文翻译为领域驱动设计，是一种软件开发方法论，它强调以业务领域为核心，通过建立通用语言来沟通需求、设计和实现，并将复杂的业务逻辑分解为多个有界上下文，在每个上下文中定义实体、值对象、聚合、服务、领域事件等概念。")]),t._v(" "),a("h2",{attrs:{id:"为什么要学习它"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么要学习它"}},[t._v("#")]),t._v(" 为什么要学习它？")]),t._v(" "),a("p",[t._v("可能有些小伙伴会问🤔，我们已经有了很多成熟的软件开发框架和工具🛠️，为什么还要学习这种看起来很抽象、很复杂的方法论呢❓其实，这正是因为我们面对的业务越来越复杂😵、越来越变化快速⚡️，我们需要一种能够应对这种复杂性和变化性的方法论。而DDD就是这样一种方法论💯。")]),t._v(" "),a("h3",{attrs:{id:"ddd可以帮助我们更好地理解业务需求"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ddd可以帮助我们更好地理解业务需求"}},[t._v("#")]),t._v(" DDD可以帮助我们更好地理解业务需求")]),t._v(" "),a("p",[t._v("在软件开发过程中，我们经常会遇到需求不明确😕、不一致😒、不完整😞甚至自相矛盾😖的情况。这些情况往往导致开发人员和业务人员之间出现沟通障碍和误解😭。而DDD可以帮助我们通过建立通用语言🗣️来消除这些障碍和误解。通用语言就是指在一个特定的上下文中使用一致且准确地描述业务概念和规则的语言。通过使用通用语言🗣️，开发人员和业务人员可以更好地理解彼此的意图，并保持需求、设计和实现之间的一致性。")]),t._v(" "),a("h3",{attrs:{id:"ddd可以帮助我们更好地组织代码结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ddd可以帮助我们更好地组织代码结构"}},[t._v("#")]),t._v(" DDD可以帮助我们更好地组织代码结构")]),t._v(" "),a("p",[t._v("在软件开发过程中，我们经常会遇到代码结构混乱🤯、耦合度高💥、重复度高💢、模块划分不清晰💫等问题。这些问题往往导致代码难以阅读👓、修改✏️和测试🧪。而DDD可以帮助我们通过划分有界上下文⭕️来更好地组织代码结构。有界上下文就是指一个具有明确边界和内聚力的子领域。在每个有界上下文中⭕️，我们可以根据业务逻辑定义实体🐘、值对象💎、聚合⭐️、服务✨、领域事件🚀等概念，来封装数据和行为 。这样，我们可以将代码结构按照业务领域来划分🗂️，而不是按照技术层次来划分 。这样可以提高代码的可读性👍、可维护性👌和可测试性👏 。")]),t._v(" "),a("h3",{attrs:{id:"ddd可以帮助我们更好地适应业务变化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ddd可以帮助我们更好地适应业务变化"}},[t._v("#")]),t._v(" DDD可以帮助我们更好地适应业务变化")]),t._v(" "),a("p",[t._v("在软件开发过程中，我们经常会遇到业务变化频繁🌪️、需求变更多🌊、用户反馈快🔥等情况。这些情况往往导致代码难以修改和扩展💣。而DDD可以帮助我们通过使用领域事件🚀来更好地适应业务变化。领域事件就是指在一个有界上下文中发生的具有业务意义的事件 。通过使用领域事件🚀，我们可以将不同的有界上下文之间解耦✂️，使得每个有界上下文只关注自己的业务逻辑，而不需要知道其他有界上下文的细节 。这样，当业务变化时，我们只需要修改相关的有界上下文，并通过发布或订阅领域事件来实现协作✅ 。")]),t._v(" "),a("h3",{attrs:{id:"知识导航"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#知识导航"}},[t._v("#")]),t._v(" 知识导航")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"./1_ddd"}},[t._v("DDD 思想解读及优秀实践")])]),t._v(" "),a("li",[a("a",{attrs:{href:"./2_dci&ddd"}},[t._v("DCI架构是如何解决DDD战术建模缺点的？")])])])])}),[],!1,null,null,null);a.default=s.exports}}]);