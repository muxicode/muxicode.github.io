(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{295:function(t,a,s){"use strict";s.r(a);var r=s(10),e=Object(r.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"_6-最大路径和"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-最大路径和"}},[t._v("#")]),t._v(" 6. 最大路径和")]),t._v(" "),a("h2",{attrs:{id:"题目"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#题目"}},[t._v("#")]),t._v(" 题目")]),t._v(" "),a("p",[t._v("给定一个矩阵matrix，先从左上角开始，每一步只能往右或者往下走，走到右下角。然后从右下角出发，每一步只能往上或者往左走，再回到左上角。任何一个位置的数字，只能获得一遍。返回最大路径和。")]),t._v(" "),a("h2",{attrs:{id:"示例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#示例"}},[t._v("#")]),t._v(" 示例")]),t._v(" "),a("p",[a("img",{attrs:{src:"D:%5C%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE%5Cgithub%5Cmuxicode.github.io%5Cdocs.vuepress%5Cpublic%5Cpart_two_6_cherry_pickup.assets%5Cimage-20230312223214648.png",alt:"image-20230312223214648"}})]),t._v(" "),a("p",[t._v("格子如图上分布，此时可以拿到的最多的1，为图中红色的路径表示，走的过程中，可以将所有的1收集到，得到最大路径和。")]),t._v(" "),a("h2",{attrs:{id:"思路"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#思路"}},[t._v("#")]),t._v(" 思路")]),t._v(" "),a("p",[t._v("有一个巧妙的设计思路：")]),t._v(" "),a("center",[a("img",{attrs:{src:"D:\\个人项目\\github\\muxicode.github.io\\docs\\.vuepress\\public\\part_two_6_cherry_pickup.assets\\image-20230312224035615.png",alt:"drawing",width:"60%"}})]),t._v(" "),a("ul",[a("li",[t._v("假设一开始有两个小人，都同时往右下角走")]),t._v(" "),a("li",[t._v("共同路过的地方数值只获取一次")]),t._v(" "),a("li",[t._v("同时到达右下角")])]),t._v(" "),a("p",[t._v("如果符合以上条件，则这种走的方式与题目的最终结果是一致的。")]),t._v(" "),a("h2",{attrs:{id:"代码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#代码"}},[t._v("#")]),t._v(" 代码")])],1)}),[],!1,null,null,null);a.default=e.exports}}]);