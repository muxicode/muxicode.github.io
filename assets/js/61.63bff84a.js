(window.webpackJsonp=window.webpackJsonp||[]).push([[61],{348:function(t,a,s){"use strict";s.r(a);var e=s(14),r=Object(e.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"旋转词"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#旋转词"}},[t._v("#")]),t._v(" 旋转词")]),t._v(" "),a("h2",{attrs:{id:"题目"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#题目"}},[t._v("#")]),t._v(" 题目：")]),t._v(" "),a("p",[t._v("检查子树。你有两棵非常大的二叉树：T1，有几万个节点；T2，有几万个节点。设计一个算法，判断 T2 是否为 T1 的子树。")]),t._v(" "),a("p",[t._v("如果 T1 有这么一个节点 n，其子树与 T2 一模一样，则 T2 为 T1 的子树，也就是说，从节点 n 处把树砍断，得到的树与 T2 完全相同。")]),t._v(" "),a("p",[t._v("**注意：**此题相对书上原题略有改动。")]),t._v(" "),a("p",[a("strong",[t._v("示例1:")])]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v(" 输入：t1 = [1, 2, 3], t2 = [2]\n 输出：true\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[a("strong",[t._v("示例2:")])]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v(" 输入：t1 = [1, null, 2, 4], t2 = [3, 2]\n 输出：false\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("h2",{attrs:{id:"题解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#题解"}},[t._v("#")]),t._v(" 题解")]),t._v(" "),a("h3",{attrs:{id:"暴力解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#暴力解"}},[t._v("#")]),t._v(" 暴力解")]),t._v(" "),a("p",[t._v("采用先序遍历，递归遍历每一个位置开始，判断其余节点是否相同。O(N*M)")]),t._v(" "),a("h3",{attrs:{id:"kmp应用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#kmp应用"}},[t._v("#")]),t._v(" KMP应用")]),t._v(" "),a("ol",[a("li",[t._v("使用先序遍历(保证节点序列的唯一性)的方式将两颗树的节点收集到数组中，空节点也需要收集。")]),t._v(" "),a("li",[t._v("改写kmp算法，将其应用在数组上，如果子树的数组在大的树的数组中，有完全匹配的子数组，则返回true，没有返回fasle")])]),t._v(" "),a("h2",{attrs:{id:"原题链接"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原题链接"}},[t._v("#")]),t._v(" 原题链接")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://leetcode.cn/problems/check-subtree-lcci/",target:"_blank",rel:"noopener noreferrer"}},[t._v("检查子树"),a("OutboundLink")],1)])])}),[],!1,null,null,null);a.default=r.exports}}]);