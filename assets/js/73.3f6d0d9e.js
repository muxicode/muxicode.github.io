(window.webpackJsonp=window.webpackJsonp||[]).push([[73],{362:function(s,t,a){"use strict";a.r(t);var n=a(14),e=Object(n.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"最小生成树kruskal"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#最小生成树kruskal"}},[s._v("#")]),s._v(" 最小生成树Kruskal")]),s._v(" "),t("p",[t("img",{attrs:{src:"/advance_2_graph_3_kruskal.assets/graph_kruskal.drawio.png",alt:""}})]),s._v(" "),t("blockquote",[t("p",[s._v("有向图与无向图，都可以使用最小生成树的算法，以下使用无向图做示例")])]),s._v(" "),t("p",[s._v("最小生成树问题就是：")]),s._v(" "),t("ul",[t("li",[s._v("以最小的代价将图中的节点都联通，求出此时的权重，或者联通节点的边的集合。")]),s._v(" "),t("li",[s._v("或者说是再不破坏联通性的条件下，可以删除一些多余的边，保证删除多余的边后，权重最小。")])]),s._v(" "),t("h2",{attrs:{id:"算法流程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#算法流程"}},[s._v("#")]),s._v(" 算法流程")]),s._v(" "),t("ol",[t("li",[t("p",[s._v("将边按权重从小到大排序")]),s._v(" "),t("p",[t("img",{attrs:{src:"/advance_2_graph_3_kruskal.assets/graph_kruskal_step1.drawio.png",alt:""}})])]),s._v(" "),t("li",[t("p",[s._v("从小到大遍历每条边，并判断边的两边的点是否已经连通，如果未连通则选择该边加入结果集，如果已经连通则放弃该边。")]),s._v(" "),t("p",[t("img",{attrs:{src:"/advance_2_graph_3_kruskal.assets/graph_kruskal_step2.drawio.png",alt:""}})]),s._v(" "),t("p",[s._v("遍历最小权值边1时，两边的 "),t("code",[s._v("A点")]),s._v("与"),t("code",[s._v("B点")]),s._v("此时并未连通，所以选择该边，此时 "),t("code",[s._v("A点")]),s._v("与"),t("code",[s._v("B点")]),s._v("连通，加入连通区，"),t("code",[s._v("边1")]),s._v("加入结果集，如下：")]),s._v(" "),t("p",[t("img",{attrs:{src:"/advance_2_graph_3_kruskal.assets/graph_kruskal-step3.drawio.png",alt:""}})])]),s._v(" "),t("li",[t("p",[s._v("继续遍历下一小的边，并判断，边两头的点是否连通，如果未连通则选择该边加入结果集，如果已经连通则放弃该边。")]),s._v(" "),t("p",[t("img",{attrs:{src:"/advance_2_graph_3_kruskal.assets/graph_kruskal_step4.drawio.png",alt:""}})]),s._v(" "),t("p",[s._v("此时遍历到边2时，两边的 "),t("code",[s._v("B点")]),s._v("与"),t("code",[s._v("D点")]),s._v("此时并未连通，所以选择该边，此时 "),t("code",[s._v("B点")]),s._v("与"),t("code",[s._v("D点")]),s._v("连通，加入连通区，"),t("code",[s._v("边2")]),s._v("加入结果集如下：")]),s._v(" "),t("p",[t("img",{attrs:{src:"/advance_2_graph_3_kruskal.assets/graph_kruskal_step5.drawio.png",alt:""}})])]),s._v(" "),t("li",[t("p",[t("code",[s._v("边3")]),s._v("与"),t("code",[s._v("边4")]),s._v("遍历过程重复以上操作，可以得到如下图所示：")])])]),s._v(" "),t("p",[t("img",{attrs:{src:"/advance_2_graph_3_kruskal.assets/graph_kruskal_step6.drawio.png",alt:""}})]),s._v(" "),t("ol",{attrs:{start:"5"}},[t("li",[t("p",[s._v("继续遍历，遍历到"),t("code",[s._v("边50")]),s._v("，此时，"),t("code",[s._v("C点")]),s._v("与"),t("code",[s._v("F点")]),s._v("，已经有由"),t("code",[s._v("边3")]),s._v("，"),t("code",[s._v("边1")]),s._v("，"),t("code",[s._v("边2")]),s._v("，"),t("code",[s._v("边4")]),s._v("连通在一起，所以"),t("strong",[s._v("放弃")]),t("code",[s._v("边50")]),s._v("，结果集不变。")]),s._v(" "),t("p",[t("img",{attrs:{src:"/advance_2_graph_3_kruskal.assets/graph_kruskal_step7.drawio.png",alt:""}})])]),s._v(" "),t("li",[t("p",[s._v("继续遍历，遍历到"),t("code",[s._v("边100")]),s._v("，此时，"),t("code",[s._v("C点")]),s._v("与"),t("code",[s._v("B点")]),s._v("，已经有由"),t("code",[s._v("边3")]),s._v("，"),t("code",[s._v("边1")]),s._v("连通在一起，所以"),t("strong",[s._v("放弃")]),t("code",[s._v("边100")]),s._v("，结果集不变。自此，我们遍历完所有的边，收集到结果集，最小权重即为结果集的边的权重相加。")]),s._v(" "),t("p",[t("img",{attrs:{src:"/advance_2_graph_3_kruskal.assets/graph_kruskal_step8.drawio.png",alt:""}})])])]),s._v(" "),t("h2",{attrs:{id:"代码实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#代码实现"}},[s._v("#")]),s._v(" 代码实现")]),s._v(" "),t("ul",[t("li",[s._v("该代码中使用基础章节中的"),t("a",{attrs:{href:"/algorithm/g1_base_8_union_set_1"}},[s._v("并查集")]),s._v("、"),t("a",{attrs:{href:"/algorithm/g1_base_9_heap"}},[s._v("堆")]),s._v("，若不了解该内容，需要先阅读该章节。")])]),s._v(" "),t("div",{staticClass:"language-go line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-go"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*\n\t并查集与堆的实现，需要参考对应章节。\n*/")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("func")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("KruskalMinSum")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("graph Graph"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 初始化结果权重")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" ans "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("int")]),s._v("\n\n\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 获取所有的点，使用点创建并查集")]),s._v("\n\tnodeArr "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("interface")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("_")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" node "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("range")]),s._v(" graph"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Nodes "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\t\tnodeArr "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("append")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("nodeArr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" node"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 初始化并查集，用于判断两点是否连通")]),s._v("\n\tnodeUnionSet "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" union_set"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("NewUnionSet")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("nodeArr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 创建小根堆，使遍历的边有序")]),s._v("\n\tsmallHeap "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" heap"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("NewSmallHeap")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("len")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("graph"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Edges"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" edge"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("_")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("range")]),s._v(" graph"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Edges "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\t\tsmallHeap"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("Push")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("edge"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 从小到大遍历所有的边")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" smallHeap"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("Size")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\t\tedge "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" smallHeap"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("Pop")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("Edge"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\t\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v("nodeUnionSet"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("IsSameSet")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("edge"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("From"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" edge"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("To"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\t\t\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 如果边两头的点不在同一个集合，选择该边，加上该边的权重")]),s._v("\n\t\t\tans "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+=")]),s._v(" edge"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Weight\n\t\t\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 选择边后，需要将两个点连通")]),s._v("\n\t\t\tnodeUnionSet"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("Union")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("edge"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("From"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" edge"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("To"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\t\t"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" ans\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br")])])])}),[],!1,null,null,null);t.default=e.exports}}]);